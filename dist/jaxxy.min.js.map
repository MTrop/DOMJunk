{"version":3,"sources":["STDIN"],"sourcesContent":["/****************************************************************************\r\n * Jaxxy by Matt Tropiano (C) 2022\r\n * Requires ECMAScript 6\r\n * Licensed for use under the MIT License\r\n * @license\r\n ****************************************************************************/\r\n(function(CTX){\r\n\t\r\n\t/********************************************************************/\r\n\t/** Test Browser Capabilities                                      **/\r\n\t/********************************************************************/\r\n\r\n\tif (!CTX.DOMParser) {\r\n\t\tconsole.error(\"Missing required object: DOMParser.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!encodeURIComponent) {\r\n\t\tconsole.error(\"Missing required function: encodeURIComponent.\");\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Utilities                                                      **/\r\n\t/********************************************************************/\r\n\r\n\tconst isType = function(obj, type) {\r\n\t\treturn Object.prototype.toString.call(obj) === '[object '+type+']';\r\n\t};\r\n\r\n\tconst isUndefined = function(obj) {\r\n\t\treturn (typeof obj) === 'undefined';\r\n\t};\r\n\r\n\tconst isNull = function(obj) {\r\n\t\treturn obj === null;\r\n\t};\r\n\r\n\tconst isBoolean = function(obj) {\r\n\t\treturn isType(obj, 'Boolean');\r\n\t};\r\n\r\n\tconst isNumber = function(obj) {\r\n\t\treturn isType(obj, 'Number');\r\n\t};\r\n\r\n\tconst isString = function(obj) {\r\n\t\treturn isType(obj, 'String');\r\n\t};\r\n\r\n\tconst isArray = function(obj) {\r\n\t\treturn isType(obj, 'Array');\r\n\t};\r\n\r\n\tconst isFunction = function(obj) {\r\n\t\treturn isType(obj, 'Function');\r\n\t};\r\n\r\n\tconst isObject = function(obj) {\r\n\t\treturn isType(obj, 'Object');\r\n\t};\r\n\r\n\tconst isBlank = function(obj) {\r\n\t\treturn (\r\n\t\t\t\tisUndefined(obj)\r\n\t\t\t|| isNull(obj) \r\n\t\t\t|| (isArray(obj) && obj.length === 0) \r\n\t\t\t|| (isNumber(obj) && isNaN(obj)) \r\n\t\t\t|| (isString(obj) && obj.trim().length === 0)\r\n\t\t\t|| obj === 0 \r\n\t\t);\r\n\t};\r\n\t\r\n\tconst each = function(list, func) {\r\n\t\tif (isUndefined(list) || isNull(list)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if (isBoolean(list) || isNumber(list) || isString(list)) {\r\n\t\t\tfunc(list, null, 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let x in list) if (list.hasOwnProperty(x)) {\r\n\t\t\t\tif (func(list[x], x, list.length))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst queryString = function(map) {\r\n\t\tlet accum = [];\r\n\t\teach(map, (value, key) => {\r\n\t\t\tif (isArray(value)) {\r\n\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\taccum.push(\r\n\t\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value[i])\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!isUndefined(value) && !isNull(value)) {\r\n\t\t\t\taccum.push(\r\n\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn accum.join('&');\r\n\t};\r\n\t\r\n\tconst AJAX_OPTIONS_DEFAULTS = {\r\n\t\t\"method\": \"GET\",\r\n\t\t\"url\": \"#\",\r\n\t\t\"data\": null,\r\n\t\t\"dataType\": 'form',\r\n\t\t\"responseType\": null,\r\n\t\t\"headers\": {},\r\n\t\t\"responseIsSuccess\": false,\r\n\t\t\"async\": true,\r\n\t\t\"user\": null,\r\n\t\t\"password\": null\r\n\t};\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Classes                                                        **/\r\n\t/********************************************************************/\r\n\r\n\tclass AJAXCall {\r\n\r\n\t\tconstructor(url, opt, body) {\r\n\t\t\t// callbacks\r\n\t\t\tthis.beforeSendFunc = null;\r\n\t\t\t\r\n\t\t\tthis.uploadStartFunc = null;\r\n\t\t\tthis.uploadProgressFunc = null;\r\n\t\t\tthis.uploadSuccessFunc = null;\r\n\t\t\tthis.uploadEndFunc = null;\r\n\r\n\t\t\tthis.startFunc = null;\r\n\t\t\tthis.progressFunc = null;\r\n\t\t\tthis.successFunc = null;\r\n\t\t\tthis.failureFunc = null;\r\n\t\t\tthis.alwaysFunc = null;\r\n\t\t\tthis.abortFunc = null;\r\n\t\t\tthis.timeoutFunc = null;\r\n\r\n\t\t\tconst FAILFUNC = (event) => {\r\n\t\t\t\tthis.failureFunc && this.failureFunc(xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t};\r\n\t\t\tconst ABORTFUNC = (event) => {\r\n\t\t\t\tthis.abortFunc && this.abortFunc(xhr, event);\r\n\t\t\t};\r\n\t\t\tconst TIMEOUTFUNC = (event) => {\r\n\t\t\t\tthis.timeoutFunc && this.timeoutFunc(xhr, event);\r\n\t\t\t};\r\n\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\t// open connection.\r\n\t\t\txhr.open(opt.method, url, opt.async, opt.user, opt.password);\r\n\t\t\tif (opt.headers) each(opt.headers, (value, key) => {\r\n\t\t\t\txhr.setRequestHeader(key, value);\r\n\t\t\t});\r\n\r\n\t\t\t// ==== Upload ====\r\n\t\t\txhr.upload.onloadstart = (event) => {\r\n\t\t\t\tthis.uploadStartFunc && this.uploadStartFunc(xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.upload.onprogress = (event) => {\r\n\t\t\t\tthis.uploadProgressFunc && this.uploadProgressFunc((event.lengthComputable ? event.loaded / event.total : 0), event.loaded, event.total, xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.upload.onload = (event) => {\r\n\t\t\t\tthis.uploadSuccessFunc && this.uploadSuccessFunc(xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.upload.onloadend = (event) => {\r\n\t\t\t\tthis.uploadEndFunc && this.uploadEndFunc(xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.upload.onerror = FAILFUNC;\r\n\t\t\txhr.upload.onabort = ABORTFUNC;\r\n\t\t\txhr.upload.ontimeout = TIMEOUTFUNC;\r\n\r\n\t\t\t// ==== Download ====\r\n\t\t\txhr.onloadstart = (event) => {\r\n\t\t\t\tthis.startFunc && this.startFunc(xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.onprogress = (event) => {\r\n\t\t\t\tthis.progressFunc && this.progressFunc((event.lengthComputable ? event.loaded / event.total : 0), event.loaded, event.total, xhr, event);\r\n\t\t\t};\r\n\t\t\txhr.onerror = FAILFUNC;\r\n\t\t\txhr.onabort = ABORTFUNC;\r\n\t\t\txhr.ontimeout = TIMEOUTFUNC;\r\n\r\n\t\t\txhr.onload = (event) => {\r\n\t\t\t\t\r\n\t\t\t\tlet c = parseInt(xhr.status / 100, 10);\r\n\t\r\n\t\t\t\t// Bad Response\r\n\t\t\t\tif ((c === 4 || c === 5) && !opt.responseIsSuccess) {\r\n\t\t\t\t\tthis.failureFunc && this.failureFunc(xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (this.successFunc) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst CHARSET = 'charset=';\r\n\t\t\t\t\t\tconst responseContentType = xhr.getResponseHeader('Content-Type');\r\n\t\r\n\t\t\t\t\t\tconst idx = responseContentType.indexOf(';');\r\n\t\t\t\t\t\tconst mimeType = idx >= 0 ? responseContentType.substring(0, idx) : responseContentType;\r\n\t\r\n\t\t\t\t\t\tconst charsetIdx = responseContentType.indexOf(CHARSET);\r\n\t\t\t\t\t\tconst charsetType = charsetIdx >= 0 ? responseContentType.substring(charsetIdx + CHARSET.length, responseContentType.length).trim() : null;\r\n\t\r\n\t\t\t\t\t\tconst typeName = opt.responseType || mimeType;\r\n\t\r\n\t\t\t\t\t\tconst res = this.responseTypeHandlers[typeName] \r\n\t\t\t\t\t\t\t? this.responseTypeHandlers[typeName](xhr.response, xhr.responseType, mimeType, charsetType, responseContentType)\r\n\t\t\t\t\t\t\t: xhr.response;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.successFunc(res, xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tthis.failureFunc && this.failureFunc(null, null, xhr, event, err);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\txhr.onloadend = (event) => {\r\n\t\t\t\tthis.alwaysFunc && this.alwaysFunc(xhr, event);\r\n\t\t\t};\r\n\r\n\t\t\t// Delay send - user may be setting fields on this object, await event yield.\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis.beforeSendFunc && this.beforeSendFunc(xhr);\r\n\t\t\t\t\txhr.send(body);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tthis.failureFunc && this.failureFunc(null, null, xhr, null, err);\r\n\t\t\t\t\tthis.alwaysFunc && this.alwaysFunc(null, xhr);\r\n\t\t\t\t}\r\n\t\t\t}, 0);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke right before the request is sent.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tbeforeSend(func) {\r\n\t\t\tthis.beforeSendFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke right before loading starts.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tstart(func) {\r\n\t\t\tthis.startFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on progress updates (if supported).\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\tpercent (Number): percent progress.\r\n\t\t *\t\tloaded (Number): loaded amount progress (if length is computable - may be undefined if not).\r\n\t\t *\t\ttotal (Number): total amount progress (if length is computable - may be undefined if not).\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tprogress(func) {\r\n\t\t\tthis.progressFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on successful finish.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\tdata (Varies): the returned data, altered by expected type.\r\n\t\t *\t\tstatus (Number): the status code.\r\n\t\t *\t\tstatusText (string): the status text.\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tsuccess(func) {\r\n\t\t\tthis.successFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke right before uploading starts.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse) the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tuploadStart(func) {\r\n\t\t\tthis.uploadStartFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on upload progress updates (if supported).\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\tpercent (Number): percent progress.\r\n\t\t *\t\tloaded (Number): loaded amount progress (if length is computable - may be undefined if not).\r\n\t\t *\t\ttotal (Number): total amount progress (if length is computable - may be undefined if not).\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tuploadProgress(func) {\r\n\t\t\tthis.uploadProgressFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on successful upload completion.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tuploadSuccess(func) {\r\n\t\t\tthis.uploadSuccessFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on upload end.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tuploadFinished(func) {\r\n\t\t\tthis.uploadEndFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on failure (and upload failure).\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\tstatus (Number): the status code (can be null if thrown error).\r\n\t\t *\t\tstatusText (string): the status text (can be null if thrown error).\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t *\t\terr (Error): JS error object if error.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tfailure(func) {\r\n\t\t\tthis.failureFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to always invoke, be it success, failure, or aborted call.\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\talways(func) {\r\n\t\t\tthis.alwaysFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on abort (and upload abort).\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\tabort(func) {\r\n\t\t\tthis.abortFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the function to invoke on timeout (and upload timeout).\r\n\t\t * @param {Function} func a function that takes:\r\n\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t */\r\n\t\ttimeout(func) {\r\n\t\t\tthis.timeoutFunc = func;\r\n\t\t\treturn this;\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tAJAXCall.prototype.responseTypeHandlers = {};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Start an AJAX call.\r\n\t * @param {*} param \r\n\t * (string) URL:\r\n\t *\t\tMakes a GET request with the provided URL.\r\n\t *\t\tDefault return handling.\r\n\t * (Object) map of options:\r\n\t *\t\tmethod (string): HTTP method. Default: \"GET\".\r\n\t *\t\turl (string): target URL. Default: \"#\".\r\n\t *\t\tdata (VARIES): content to send:\r\n\t *\t\t\t(Object) \r\n\t *\t\t\t\tIf GET/DELETE, turned into params. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted in body and reformatted depending on dataType.\r\n\t *\t\t\t(string) \r\n\t *\t\t\t\tIf GET/DELETE, appended as-is as query. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as text, but dataType is now a MIME.\r\n\t *\t\t\t(ArrayBuffer) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t *\t\t\t(ArrayBufferView) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t *\t\t\t(Blob) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t *\t\t\t(Document) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'text/html'\r\n\t *\t\t\t(XMLDocument) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'application/xml'\r\n\t *\t\t\t(HTMLDocument) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'text/html'\r\n\t *\t\t\t(FormData) \r\n\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'multipart/form-data'\r\n\t *\t\tdataType (string): If POST/PUT, the type of data referred to as \"data\". Usually, this is a MIME type.\r\n\t *\t\t\t'text': Content-Type is set to 'text/plain'. \r\n\t *\t\t\t\tIf data is an Object, JSON-stringify. \r\n\t *\t\t\t\tIf text, no conversion.\r\n\t *\t\t\t'form': Content-Type is set to 'application/x-www-form-urlencoded'. \r\n\t *\t\t\t\tIf data is an Object, content is converted to a query string. \r\n\t *\t\t\t\tIf text, no conversion.\r\n\t *\t\t\t'json': Content-Type is set to 'application/json'. \r\n\t *\t\t\t\tIf data is an Object, JSON-stringify. \r\n\t *\t\t\t\tIf text, no conversion.\r\n\t *\t\t\tElse, 'application/octet-stream'\r\n\t *\t\tresponseType (string): \r\n\t *\t\t\tWhat to expect the data back as (either response handler typename or MIMEtype override).\r\n\t *\t\t\tElse, default is null, which will attempt to convert based on content MIME. If that fails, return response as-is.\r\n\t *\t\tresponseIsSuccess (Boolean): If true, 4XX and 5XX is considered \"success.\", else 4XX and 5XX is failure. Default: false.\r\n\t *\t\theaders (Object): Map of HTTP Header name to value. Default: {}\r\n\t *\t\tasync (Boolean): If true, asynchronus. Else, wait until completion. Default: true.\r\n\t *\t\tuser (string): username for authorization. Default: undefined.\r\n\t *\t\tpassword (string): password for authorization. Default: undefined.\r\n\t * @returns {AJAXCall} an AJAXCall instance.\r\n\t */\r\n\tconst Jaxxy = new function() {\r\n\t\treturn function(param) {\r\n\t\t\tlet options = null;\r\n\t\t\r\n\t\t\tif (isUndefined(param) || isNull(param)) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"method\": 'GET', \r\n\t\t\t\t\t\"url\": \"#\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if (isString(param)) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"method\": 'GET', \r\n\t\t\t\t\t\"url\": param\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if (isObject(param)) {\r\n\t\t\t\toptions = param;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"method\": 'GET', \r\n\t\t\t\t\t\"url\": toString(param)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst opt = { ...AJAX_OPTIONS_DEFAULTS, ...options };\r\n\t\r\n\t\t\toptions.method = options.method.toUpperCase();\r\n\t\r\n\t\t\tlet url = opt.url;\r\n\t\t\tlet body = null;\r\n\t\t\t\r\n\t\t\tif (!isNull(opt.data) && !isUndefined(opt.data)) {\r\n\t\t\t\tif (isObject(opt.data)) {\r\n\t\t\t\t\tif (opt.method === 'GET' || opt.method === 'DELETE') {\r\n\t\t\t\t\t\turl = url + (url.indexOf('?') >= 0 ? '&' : '?') + queryString(opt.data);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (opt.dataType === 'text') {\r\n\t\t\t\t\t\t\tbody = queryString(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'text/plain';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (opt.dataType === 'json') {\r\n\t\t\t\t\t\t\tbody = JSON.stringify(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'application/json';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (opt.dataType === 'form') {\r\n\t\t\t\t\t\t\tbody = queryString(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isString(opt.data) || isType(opt.data, 'DOMString')) {\r\n\t\t\t\t\tif (opt.method === 'GET' || opt.method === 'DELETE') {\r\n\t\t\t\t\t\turl = url + qs;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'ArrayBuffer')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'ArrayBufferView')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'Blob')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'Document') || isType(opt.data, 'HTMLDocument')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'text/html';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'XMLDocument')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'application/xml';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'FormData')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'multipart/form-data';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new AJAXCall(url, opt, body);\r\n\t\t}\r\n\t};\r\n\r\n\tconst $jsonAjax = function(method, url, data, headers) {\r\n\t\treturn $ajax({\r\n\t\t\t\"method\": method, \r\n\t\t\t\"headers\": {\r\n\t\t\t\t\"Accept\": 'application/json',\r\n\t\t\t\t...headers\r\n\t\t\t},\r\n\t\t\t\"url\": url,\r\n\t\t\t\"data\": data,\r\n\t\t\t\"dataType\": 'json',\r\n\t\t\t\"responseType\": 'json'\t\r\n\t\t});\r\n\t};\r\n\r\n\tconst $ajaxTextHandler = function(responseContent) {\r\n\t\tif (!isString(responseContent)) {\r\n\t\t\treturn Object.prototype.toString.call(responseContent);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn responseContent;\r\n\t\t}\r\n\t};\r\n\r\n\tconst $ajaxXMLHandler = function(responseContent, _, mimeType) {\r\n\t\treturn (new DOMParser()).parseFromString(responseContent, mimeType);\r\n\t};\r\n\r\n\tconst $ajaxJSONHandler = function(responseContent) {\r\n\t\treturn JSON.parse(responseContent);\r\n\t};\r\n\r\n\t\r\n\t/********************************************************************/\r\n\t/** Exported                                                       **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Adds/sets an AJAX response type handler.\r\n\t * The handled type is either the name of an expected type passed to options,\r\n\t * or the MIME-Type of the response body.\r\n\t * @param {string} handledTypeName the name of the handled type or MIME-Type.\r\n\t * @param {Function} func the handler function.\r\n\t */\r\n\tJaxxy.extendAJAX = function(handledTypeName, func) {\r\n\t\tif (AJAXCall.prototype.responseTypeHandlers[handledTypeName]) {\r\n\t\t\tconsole.warn('Jaxxy: Overriding existing handler type: ' + handledTypeName);\r\n\t\t}\t\r\n\t\tAJAXCall.prototype.responseTypeHandlers[handledTypeName] = func;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\tJaxxy.extendAJAX('text', $ajaxTextHandler);\r\n\tJaxxy.extendAJAX('text/plain', $ajaxTextHandler);\r\n\r\n\tJaxxy.extendAJAX('json', $ajaxJSONHandler);\r\n\tJaxxy.extendAJAX('application/json', $ajaxJSONHandler);\r\n\r\n\tJaxxy.extendAJAX('xml', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('text/xml', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('application/xml', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('html', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('text/html', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('xhtml', $ajaxXMLHandler);\r\n\tJaxxy.extendAJAX('text/xhtml', $ajaxXMLHandler);\r\n\t\r\n\tJaxxy.each = each;\r\n\tJaxxy.queryString = queryString;\r\n\r\n\tJaxxy.isType = isType;\r\n\tJaxxy.isUndefined = isUndefined;\r\n\tJaxxy.isNull = isNull;\r\n\tJaxxy.isBoolean = isBoolean;\r\n\tJaxxy.isNumber = isNumber;\r\n\tJaxxy.isString = isString;\r\n\tJaxxy.isArray = isArray;\r\n\tJaxxy.isFunction = isFunction;\r\n\tJaxxy.isObject = isObject;\r\n\tJaxxy.isBlank = isBlank;\r\n\r\n\tJaxxy.JSON =        $jsonAjax;\r\n\tJaxxy.JSON.get =    function(url, headers)       { return $jsonAjax('get', url, null, headers); };\r\n\tJaxxy.JSON.delete = function(url, headers)       { return $jsonAjax('delete', url, null, headers); };\r\n\tJaxxy.JSON.put =    function(url, data, headers) { return $jsonAjax('put', url, data, headers); };\r\n\tJaxxy.JSON.post =   function(url, data, headers) { return $jsonAjax('post', url, data, headers); };\r\n\tJaxxy.JSON.patch =  function(url, data, headers) { return $jsonAjax('patch', url, data, headers); };\r\n\r\n\t/********************************************************************/\r\n\r\n\tlet old$JXAssignment     = CTX.$JX;\r\n\tlet old$JXJAssignment    = CTX.$JXJ;\r\n\r\n\t/**\r\n\t * Restores the previous assigment of '$JX' and '$JXJ' at load.\r\n\t */\r\n\tJaxxy.noConflict = function() {\r\n\t\tCTX.$JX     = old$JXAssignment;\r\n\t\tCTX.$JXJ    = old$JXJAssignment;\r\n\t};\r\n\t\r\n\tCTX.Jaxxy = Jaxxy;\r\n\tCTX.$JX   = Jaxxy;\r\n\tCTX.$JXJ  = Jaxxy.JSON;\r\n\r\n})(this);\r\n"],"names":["CTX","DOMParser","encodeURIComponent","isType","obj","type","Object","prototype","toString","call","isUndefined","isNull","isBoolean","isNumber","isString","isArray","isObject","each","list","func","let","x","hasOwnProperty","length","queryString","map","accum","value","key","i","push","join","AJAX_OPTIONS_DEFAULTS","method","url","data","dataType","responseType","headers","responseIsSuccess","async","user","password","AJAXCall","constructor","opt","body","this","beforeSendFunc","uploadStartFunc","uploadProgressFunc","uploadSuccessFunc","uploadEndFunc","startFunc","progressFunc","successFunc","failureFunc","alwaysFunc","abortFunc","timeoutFunc","FAILFUNC","xhr","status","statusText","event","ABORTFUNC","TIMEOUTFUNC","XMLHttpRequest","open","setRequestHeader","upload","onloadstart","onprogress","lengthComputable","loaded","total","onload","onloadend","onerror","onabort","ontimeout","c","parseInt","CHARSET","responseContentType","getResponseHeader","idx","indexOf","mimeType","substring","charsetIdx","charsetType","trim","typeName","res","responseTypeHandlers","response","err","setTimeout","send","beforeSend","start","progress","success","uploadStart","uploadProgress","uploadSuccess","uploadFinished","failure","always","abort","timeout","Jaxxy","param","options","toUpperCase","JSON","stringify","qs","$jsonAjax","$ajax","Accept","$ajaxTextHandler","responseContent","$ajaxXMLHandler","_","parseFromString","$ajaxJSONHandler","parse","extendAJAX","handledTypeName","console","warn","isFunction","isBlank","isNaN","get","delete","put","post","patch","old$JXAssignment","$JX","old$JXJAssignment","$JXJ","noConflict","error"],"mappings":"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"}