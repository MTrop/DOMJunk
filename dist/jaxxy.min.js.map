{"version":3,"sources":["STDIN"],"sourcesContent":["/****************************************************************************\r\n * Jaxxy by Matt Tropiano (C) 2022\r\n * Requires ECMAScript 6\r\n * Licensed for use under the MIT License\r\n * @license\r\n ****************************************************************************/\r\n(function(CTX){\r\n\t\r\n\t\t/********************************************************************/\r\n\t\t/** Test Browser Capabilities                                      **/\r\n\t\t/********************************************************************/\r\n\t\r\n\t\tif (!CTX.document.querySelectorAll) {\r\n\t\t\tconsole.error(\"Missing required function: document.querySelectorAll.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CTX.document.querySelector) {\r\n\t\t\tconsole.error(\"Missing required function: document.querySelector.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CTX.Element.prototype.querySelectorAll) {\r\n\t\t\tconsole.error(\"Missing required function: Element.querySelectorAll.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CTX.Element.prototype.querySelector) {\r\n\t\t\tconsole.error(\"Missing required function: Element.querySelector.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!CTX.DOMParser) {\r\n\t\t\tconsole.error(\"Missing required object: DOMParser.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!encodeURIComponent) {\r\n\t\t\tconsole.error(\"Missing required function: encodeURIComponent.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\t/********************************************************************/\r\n\t\t/** Utilities                                                      **/\r\n\t\t/********************************************************************/\r\n\r\n\t\tconst isType = function(obj, type) {\r\n\t\t\treturn Object.prototype.toString.call(obj) === '[object '+type+']';\r\n\t\t};\r\n\r\n\t\tconst isUndefined = function(obj) {\r\n\t\t\treturn (typeof obj) === 'undefined';\r\n\t\t};\r\n\r\n\t\tconst isNull = function(obj) {\r\n\t\t\treturn obj === null;\r\n\t\t};\r\n\r\n\t\tconst isBoolean = function(obj) {\r\n\t\t\treturn isType(obj, 'Boolean');\r\n\t\t};\r\n\r\n\t\tconst isNumber = function(obj) {\r\n\t\t\treturn isType(obj, 'Number');\r\n\t\t};\r\n\r\n\t\tconst isString = function(obj) {\r\n\t\t\treturn isType(obj, 'String');\r\n\t\t};\r\n\r\n\t\tconst isArray = function(obj) {\r\n\t\t\treturn isType(obj, 'Array');\r\n\t\t};\r\n\r\n\t\tconst isFunction = function(obj) {\r\n\t\t\treturn isType(obj, 'Function');\r\n\t\t};\r\n\r\n\t\tconst isObject = function(obj) {\r\n\t\t\treturn isType(obj, 'Object');\r\n\t\t};\r\n\r\n\t\tconst isBlank = function(obj) {\r\n\t\t\treturn (\r\n\t\t\t\t   isUndefined(obj)\r\n\t\t\t\t|| isNull(obj) \r\n\t\t\t\t|| (isArray(obj) && obj.length === 0) \r\n\t\t\t\t|| (isNumber(obj) && isNaN(obj)) \r\n\t\t\t\t|| (isString(obj) && obj.trim().length === 0)\r\n\t\t\t\t|| obj === 0 \r\n\t\t\t);\r\n\t\t};\r\n\t\t\r\n\t\tconst each = function(list, func) {\r\n\t\t\tif (isUndefined(list) || isNull(list)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (isBoolean(list) || isNumber(list) || isString(list)) {\r\n\t\t\t\tfunc(list, null, 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (let x in list) if (list.hasOwnProperty(x)) {\r\n\t\t\t\t\tif (func(list[x], x, list.length))\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst queryString = function(map) {\r\n\t\t\tlet accum = [];\r\n\t\t\teach(map, (value, key) => {\r\n\t\t\t\tif (isArray(value)) {\r\n\t\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\t\taccum.push(\r\n\t\t\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value[i])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (!isUndefined(value) && !isNull(value)) {\r\n\t\t\t\t\taccum.push(\r\n\t\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn accum.join('&');\r\n\t\t};\r\n\t\t\r\n\t\tconst AJAX_OPTIONS_DEFAULTS = {\r\n\t\t\t\"data\": null,\r\n\t\t\t\"dataType\": 'form',\r\n\t\t\t\"responseType\": null,\r\n\t\t\t\"headers\": {},\r\n\t\t\t\"responseIsSuccess\": false,\r\n\t\t\t\"async\": true,\r\n\t\t\t\"user\": null,\r\n\t\t\t\"password\": null\r\n\t\t};\r\n\r\n\t\t/********************************************************************/\r\n\t\t/** Classes                                                        **/\r\n\t\t/********************************************************************/\r\n\r\n\t\tclass AJAXCall {\r\n\r\n\t\t\tconstructor(url, opt, body) {\r\n\t\t\t\t// callbacks\r\n\t\t\t\tthis.beforeSendFunc = null;\r\n\t\t\t\t\r\n\t\t\t\tthis.uploadStartFunc = null;\r\n\t\t\t\tthis.uploadProgressFunc = null;\r\n\t\t\t\tthis.uploadSuccessFunc = null;\r\n\t\t\t\tthis.uploadEndFunc = null;\r\n\r\n\t\t\t\tthis.startFunc = null;\r\n\t\t\t\tthis.progressFunc = null;\r\n\t\t\t\tthis.successFunc = null;\r\n\t\t\t\tthis.failureFunc = null;\r\n\t\t\t\tthis.alwaysFunc = null;\r\n\t\t\t\tthis.abortFunc = null;\r\n\t\t\t\tthis.timeoutFunc = null;\r\n\r\n\t\t\t\tconst FAILFUNC = (event) => {\r\n\t\t\t\t\tthis.failureFunc && this.failureFunc(xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\tconst ABORTFUNC = (event) => {\r\n\t\t\t\t\tthis.abortFunc && this.abortFunc(xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\tconst TIMEOUTFUNC = (event) => {\r\n\t\t\t\t\tthis.timeoutFunc && this.timeoutFunc(xhr, event);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\t\t// open connection.\r\n\t\t\t\txhr.open(opt.method, url, opt.async, opt.user, opt.password);\r\n\t\t\t\tif (opt.headers) each(opt.headers, (value, key) => {\r\n\t\t\t\t\txhr.setRequestHeader(key, value);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// ==== Upload ====\r\n\t\t\t\txhr.upload.onloadstart = (event) => {\r\n\t\t\t\t\tthis.uploadStartFunc && this.uploadStartFunc(xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.upload.onprogress = (event) => {\r\n\t\t\t\t\tthis.uploadProgressFunc && this.uploadProgressFunc((event.lengthComputable ? event.loaded / event.total : 0), event.loaded, event.total, xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.upload.onload = (event) => {\r\n\t\t\t\t\tthis.uploadSuccessFunc && this.uploadSuccessFunc(xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.upload.onloadend = (event) => {\r\n\t\t\t\t\tthis.uploadEndFunc && this.uploadEndFunc(xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.upload.onerror = FAILFUNC;\r\n\t\t\t\txhr.upload.onabort = ABORTFUNC;\r\n\t\t\t\txhr.upload.ontimeout = TIMEOUTFUNC;\r\n\r\n\t\t\t\t// ==== Download ====\r\n\t\t\t\txhr.onloadstart = (event) => {\r\n\t\t\t\t\tthis.startFunc && this.startFunc(xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.onprogress = (event) => {\r\n\t\t\t\t\tthis.progressFunc && this.progressFunc((event.lengthComputable ? event.loaded / event.total : 0), event.loaded, event.total, xhr, event);\r\n\t\t\t\t};\r\n\t\t\t\txhr.onerror = FAILFUNC;\r\n\t\t\t\txhr.onabort = ABORTFUNC;\r\n\t\t\t\txhr.ontimeout = TIMEOUTFUNC;\r\n\r\n\t\t\t\txhr.onload = (event) => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet c = parseInt(xhr.status / 100, 10);\r\n\t\t\r\n\t\t\t\t\t// Bad Response\r\n\t\t\t\t\tif ((c === 4 || c === 5) && !opt.responseIsSuccess) {\r\n\t\t\t\t\t\tthis.failureFunc && this.failureFunc(xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.successFunc) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tconst CHARSET = 'charset=';\r\n\t\t\t\t\t\t\tconst responseContentType = xhr.getResponseHeader('Content-Type');\r\n\t\t\r\n\t\t\t\t\t\t\tconst idx = responseContentType.indexOf(';');\r\n\t\t\t\t\t\t\tconst mimeType = idx >= 0 ? responseContentType.substring(0, idx) : responseContentType;\r\n\t\t\r\n\t\t\t\t\t\t\tconst charsetIdx = responseContentType.indexOf(CHARSET);\r\n\t\t\t\t\t\t\tconst charsetType = charsetIdx >= 0 ? responseContentType.substring(charsetIdx + CHARSET.length, responseContentType.length).trim() : null;\r\n\t\t\r\n\t\t\t\t\t\t\tconst typeName = opt.responseType || mimeType;\r\n\t\t\r\n\t\t\t\t\t\t\tconst res = responseTypeHandlers[typeName] \r\n\t\t\t\t\t\t\t\t? responseTypeHandlers[typeName](xhr.response, xhr.responseType, mimeType, charsetType, responseContentType)\r\n\t\t\t\t\t\t\t\t: xhr.response;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.successFunc(res, xhr.status, xhr.statusText, xhr, event);\r\n\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\tthis.failureFunc && this.failureFunc(null, null, xhr, event, err);\r\n\t\t\t\t\t\t\tthis.alwaysFunc && this.alwaysFunc(event, xhr);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\txhr.onloadend = (event) => {\r\n\t\t\t\t\tthis.alwaysFunc && this.alwaysFunc(xhr, event);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Delay send - user may be setting fields on this object, await event yield.\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tthis.beforeSendFunc && this.beforeSendFunc(xhr);\r\n\t\t\t\t\t\txhr.send(body);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tthis.failureFunc && this.failureFunc(null, null, xhr, null, err);\r\n\t\t\t\t\t\tthis.alwaysFunc && this.alwaysFunc(null, xhr);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 0);\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke right before the request is sent.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tbeforeSend(func) {\r\n\t\t\t\tthis.beforeSendFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke right before loading starts.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tstart(func) {\r\n\t\t\t\tthis.startFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on progress updates (if supported).\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\tpercent (Number): percent progress.\r\n\t\t\t *\t\tloaded (Number): loaded amount progress (if length is computable - may be undefined if not).\r\n\t\t\t *\t\ttotal (Number): total amount progress (if length is computable - may be undefined if not).\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tprogress(func) {\r\n\t\t\t\tthis.progressFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on successful finish.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\tdata (Varies): the returned data, altered by expected type.\r\n\t\t\t *\t\tstatus (Number): the status code.\r\n\t\t\t *\t\tstatusText (string): the status text.\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tsuccess(func) {\r\n\t\t\t\tthis.successFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke right before uploading starts.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse) the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tuploadStart(func) {\r\n\t\t\t\tthis.uploadStartFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on upload progress updates (if supported).\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\tpercent (Number): percent progress.\r\n\t\t\t *\t\tloaded (Number): loaded amount progress (if length is computable - may be undefined if not).\r\n\t\t\t *\t\ttotal (Number): total amount progress (if length is computable - may be undefined if not).\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tuploadProgress(func) {\r\n\t\t\t\tthis.uploadProgressFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on successful upload completion.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tuploadSuccess(func) {\r\n\t\t\t\tthis.uploadSuccessFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on upload end.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tuploadFinished(func) {\r\n\t\t\t\tthis.uploadEndFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on failure (and upload failure).\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\tstatus (Number): the status code (can be null if thrown error).\r\n\t\t\t *\t\tstatusText (string): the status text (can be null if thrown error).\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t *\t\terr (Error): JS error object if error.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tfailure(func) {\r\n\t\t\t\tthis.failureFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to always invoke, be it success, failure, or aborted call.\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\talways(func) {\r\n\t\t\t\tthis.alwaysFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on abort (and upload abort).\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\tabort(func) {\r\n\t\t\t\tthis.abortFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the function to invoke on timeout (and upload timeout).\r\n\t\t\t * @param {Function} func a function that takes:\r\n\t\t\t *\t\txhr (XMLHttpResponse): the actual XMLHttpResponse object.\r\n\t\t\t *\t\tevent (ProgressEvent): the actual Event object.\r\n\t\t\t * @returns {AJAXCall} itself for chaining.\r\n\t\t\t */\r\n\t\t\ttimeout(func) {\r\n\t\t\t\tthis.timeoutFunc = func;\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tAJAXCall.prototype.responseTypeHandlers = {};\r\n\r\n\t\t/********************************************************************/\r\n\r\n\t\t/**\r\n\t\t * Start an AJAX call.\r\n\t\t * @param {*} param \r\n\t\t * (string) URL:\r\n\t\t *\t\tMakes a GET request with the provided URL.\r\n\t\t *\t\tDefault return handling.\r\n\t\t * (Object) map of options:\r\n\t\t *\t\tmethod (string): HTTP method.\r\n\t\t *\t\turl (string): target URL.\r\n\t\t *\t\tdata (VARIES): content to send:\r\n\t\t *\t\t\t(Object) \r\n\t\t *\t\t\t\tIf GET/DELETE, turned into params. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted in body and reformatted depending on dataType.\r\n\t\t *\t\t\t(string) \r\n\t\t *\t\t\t\tIf GET/DELETE, appended as-is as query. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as text, but dataType is now a MIME.\r\n\t\t *\t\t\t(ArrayBuffer) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t\t *\t\t\t(ArrayBufferView) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t\t *\t\t\t(Blob) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is now a MIME.\r\n\t\t *\t\t\t(Document) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'text/html'\r\n\t\t *\t\t\t(XMLDocument) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'application/xml'\r\n\t\t *\t\t\t(HTMLDocument) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'text/html'\r\n\t\t *\t\t\t(FormData) \r\n\t\t *\t\t\t\tIf GET/DELETE, discarded. \r\n\t\t *\t\t\t\tIf POST/PUT/PATCH, submitted as-is, but dataType is overridden to 'multipart/form-data'\r\n\t\t *\t\tdataType (string): If POST/PUT, the type of data referred to as \"data\". Usually, this is a MIME type.\r\n\t\t *\t\t\t'text': Content-Type is set to 'text/plain'. \r\n\t\t *\t\t\t\tIf data is an Object, JSON-stringify. \r\n\t\t *\t\t\t\tIf text, no conversion.\r\n\t\t *\t\t\t'form': Content-Type is set to 'application/x-www-form-urlencoded'. \r\n\t\t *\t\t\t\tIf data is an Object, content is converted to a query string. \r\n\t\t *\t\t\t\tIf text, no conversion.\r\n\t\t *\t\t\t'json': Content-Type is set to 'application/json'. \r\n\t\t *\t\t\t\tIf data is an Object, JSON-stringify. \r\n\t\t *\t\t\t\tIf text, no conversion.\r\n\t\t *\t\t\tElse, 'application/octet-stream'\r\n\t\t *\t\tresponseType (string): \r\n\t\t *\t\t\tWhat to expect the data back as (either response handler typename or MIMEtype override).\r\n\t\t *\t\t\tElse, default is null, which will attempt to convert based on content MIME. If that fails, return response as-is.\r\n\t\t *\t\tresponseIsSuccess (Boolean): If true, 4XX and 5XX is considered \"success.\", else 4XX and 5XX is failure.\r\n\t\t *\t\theaders (Object): Map of HTTP Header name to value.\r\n\t\t *\t\tasync (Boolean): If true, asynchronus. Else, wait until completion.\r\n\t\t *\t\tuser (string): username for authorization.\r\n\t\t *\t\tpassword (string): password for authorization.\r\n\t\t * @returns {AJAXCall} an AJAXCall instance.\r\n\t\t */\r\n\t\tconst Jaxxy = new function(param) {\r\n\t\t\tlet options = null;\r\n\t\t\t\r\n\t\t\tif (isString(param)) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"method\": 'GET', \r\n\t\t\t\t\t\"url\": param\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if (isObject(param)) {\r\n\t\t\t\toptions = param;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"method\": 'GET', \r\n\t\t\t\t\t\"url\": toString(param)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!options.method) {\r\n\t\t\t\toptions.method = 'GET';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions.method = options.method.toUpperCase();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toptions.url = options.url || '#';\r\n\t\t\t\r\n\t\t\tconst opt = { ...AJAX_OPTIONS_DEFAULTS, ...options };\r\n\r\n\t\t\tlet url = opt.url;\r\n\t\t\tlet body = null;\r\n\t\t\t\r\n\t\t\tif (!isNull(opt.data) && !isUndefined(opt.data)) {\r\n\t\t\t\tif (isObject(opt.data)) {\r\n\t\t\t\t\tif (opt.method === 'GET' || opt.method === 'DELETE') {\r\n\t\t\t\t\t\turl = url + (url.indexOf('?') >= 0 ? '&' : '?') + queryString(opt.data);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (opt.dataType === 'text') {\r\n\t\t\t\t\t\t\tbody = queryString(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'text/plain';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (opt.dataType === 'json') {\r\n\t\t\t\t\t\t\tbody = JSON.stringify(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'application/json';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (opt.dataType === 'form') {\r\n\t\t\t\t\t\t\tbody = queryString(opt.data);\r\n\t\t\t\t\t\t\topt.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isString(opt.data) || isType(opt.data, 'DOMString')) {\r\n\t\t\t\t\tif (opt.method === 'GET' || opt.method === 'DELETE') {\r\n\t\t\t\t\t\turl = url + qs;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'ArrayBuffer')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'ArrayBufferView')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'Blob')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = opt.dataType || 'application/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'Document') || isType(opt.data, 'HTMLDocument')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'text/html';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'XMLDocument')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'application/xml';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (isType(opt.data, 'FormData')) {\r\n\t\t\t\t\tif (!(opt.method === 'GET' || opt.method === 'DELETE')) {\r\n\t\t\t\t\t\tbody = opt.data;\r\n\t\t\t\t\t\topt.headers['Content-Type'] = 'multipart/form-data';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new AJAXCall(url, opt, body);\r\n\t\t};\r\n\r\n\t\tconst $jsonAjax = function(method, url, data, headers) {\r\n\t\t\treturn $ajax({\r\n\t\t\t\t\"method\": method, \r\n\t\t\t\t\"headers\": {\r\n\t\t\t\t\t\"Accept\": 'application/json',\r\n\t\t\t\t\t...headers\r\n\t\t\t\t},\r\n\t\t\t\t\"url\": url,\r\n\t\t\t\t\"data\": data,\r\n\t\t\t\t\"dataType\": 'json',\r\n\t\t\t\t\"responseType\": 'json'\t\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst $ajaxTextHandler = function (responseContent) {\r\n\t\t\tif (!isString(responseContent)) {\r\n\t\t\t\treturn Object.prototype.toString.call(responseContent);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn responseContent;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst $ajaxXMLHandler = function(responseContent, _, mimeType) {\r\n\t\t\treturn (new DOMParser()).parseFromString(responseContent, mimeType);\r\n\t\t};\r\n\r\n\t\tconst $ajaxJSONHandler = function(responseContent) {\r\n\t\t\treturn JSON.parse(responseContent);\r\n\t\t};\r\n\r\n\t\t/********************************************************************/\r\n\t\t/** Exported                                                       **/\r\n\t\t/********************************************************************/\r\n\r\n\t\t/**\r\n\t\t * Adds/sets an AJAX response type handler.\r\n\t\t * The handled type is either the name of an expected type passed to options,\r\n\t\t * or the MIME-Type of the response body.\r\n\t\t * @param {string} handledTypeName the name of type.\r\n\t\t * @param {Function} func the handler function.\r\n\t\t */\r\n\t\tJaxxy.extendAJAX = function(handledTypeName, func) {\r\n\t\t\tAJAXCall.prototype.responseTypeHandlers[handledTypeName] = func;\r\n\t\t};\r\n\r\n\t\t/********************************************************************/\r\n\r\n\t\tJaxxy.extendAJAX('text', $ajaxTextHandler);\r\n\t\tJaxxy.extendAJAX('text/plain', $ajaxTextHandler);\r\n\r\n\t\tJaxxy.extendAJAX('json', $ajaxJSONHandler);\r\n\t\tJaxxy.extendAJAX('application/json', $ajaxJSONHandler);\r\n\r\n\t\tJaxxy.extendAJAX('xml', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('text/xml', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('application/xml', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('html', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('text/html', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('xhtml', $ajaxXMLHandler);\r\n\t\tJaxxy.extendAJAX('text/xhtml', $ajaxXMLHandler);\r\n\t\t\r\n\t\tJaxxy.each = each;\r\n\t\tJaxxy.queryString = queryString;\r\n\r\n\t\tJaxxy.isType = isType;\r\n\t\tJaxxy.isUndefined = isUndefined;\r\n\t\tJaxxy.isNull = isNull;\r\n\t\tJaxxy.isBoolean = isBoolean;\r\n\t\tJaxxy.isNumber = isNumber;\r\n\t\tJaxxy.isString = isString;\r\n\t\tJaxxy.isArray = isArray;\r\n\t\tJaxxy.isFunction = isFunction;\r\n\t\tJaxxy.isObject = isObject;\r\n\t\tJaxxy.isBlank = isBlank;\r\n\r\n\t\tJaxxy.JSON =        $jsonAjax;\r\n\t\tJaxxy.JSON.get =    function(url, headers)       { return $jsonAjax('get', url, null, headers); };\r\n\t\tJaxxy.JSON.delete = function(url, headers)       { return $jsonAjax('delete', url, null, headers); };\r\n\t\tJaxxy.JSON.put =    function(url, data, headers) { return $jsonAjax('put', url, data, headers); };\r\n\t\tJaxxy.JSON.post =   function(url, data, headers) { return $jsonAjax('post', url, data, headers); };\r\n\t\tJaxxy.JSON.patch =  function(url, data, headers) { return $jsonAjax('patch', url, data, headers); };\r\n\r\n\t\t/********************************************************************/\r\n\r\n\t\tlet old$JXAssignment     = CTX.$JX;\r\n\t\tlet old$JXJAssignment    = CTX.$JXJ;\r\n\r\n\t\t/**\r\n\t\t * Restores the previous assigment of '$JX' and '$JXJ' at load.\r\n\t\t */\r\n\t\tJaxxy.noConflict = function() {\r\n\t\t\tCTX.$JX     = old$JXAssignment;\r\n\t\t\tCTX.$JXJ    = old$JXJAssignment;\r\n\t\t};\r\n\t\t\r\n\t\tCTX.Jaxxy = Jaxxy;\r\n\t\tCTX.$JX   = Jaxxy;\r\n\t\tCTX.$JXJ  = Jaxxy.JSON;\r\n\r\n})(this);\r\n"],"names":["CTX","document","querySelectorAll","querySelector","Element","prototype","DOMParser","encodeURIComponent","isType","obj","type","Object","toString","call","isUndefined","isNull","isBoolean","isNumber","isString","isArray","isObject","each","list","func","let","x","hasOwnProperty","length","queryString","map","accum","value","key","i","push","join","AJAX_OPTIONS_DEFAULTS","data","dataType","responseType","headers","responseIsSuccess","async","user","password","AJAXCall","constructor","url","opt","body","this","beforeSendFunc","uploadStartFunc","uploadProgressFunc","uploadSuccessFunc","uploadEndFunc","startFunc","progressFunc","successFunc","failureFunc","alwaysFunc","abortFunc","timeoutFunc","FAILFUNC","xhr","status","statusText","event","ABORTFUNC","TIMEOUTFUNC","XMLHttpRequest","open","method","setRequestHeader","upload","onloadstart","onprogress","lengthComputable","loaded","total","onload","onloadend","onerror","onabort","ontimeout","c","parseInt","CHARSET","responseContentType","getResponseHeader","idx","indexOf","mimeType","substring","charsetIdx","charsetType","trim","typeName","res","responseTypeHandlers","response","err","setTimeout","send","beforeSend","start","progress","success","uploadStart","uploadProgress","uploadSuccess","uploadFinished","failure","always","abort","timeout","Jaxxy","param","options","toUpperCase","JSON","stringify","qs","$jsonAjax","$ajax","Accept","$ajaxTextHandler","responseContent","$ajaxXMLHandler","_","parseFromString","$ajaxJSONHandler","parse","extendAJAX","handledTypeName","isFunction","isBlank","isNaN","get","delete","put","post","patch","old$JXAssignment","$JX","old$JXJAssignment","$JXJ","noConflict","console","error"],"mappings":"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"}