{"version":3,"sources":["STDIN"],"sourcesContent":["/****************************************************************************\r\n * DOMJunk by Matt Tropiano (C) 2021\r\n * Requires ECMAScript 6\r\n * Licensed for use under the MIT License\r\n * @license\r\n ****************************************************************************/\r\n(function(CTX){\r\n\t\r\n\t/********************************************************************/\r\n\t/** Test Browser Capabilities                                      **/\r\n\t/********************************************************************/\r\n\r\n    if (!CTX.Element) {\r\n        console.error(\"Missing required type: Element.\");\r\n        return;\r\n    }\r\n\tif (!CTX.document.querySelectorAll) {\r\n\t\tconsole.error(\"Missing required function: document.querySelectorAll.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.querySelector) {\r\n\t\tconsole.error(\"Missing required function: document.querySelector.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.createElement) {\r\n\t\tconsole.error(\"Missing required function: document.createElement.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.createTextNode) {\r\n\t\tconsole.error(\"Missing required function: document.createTextNode.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.Element.prototype.querySelectorAll) {\r\n\t\tconsole.error(\"Missing required function: Element.querySelectorAll.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.Element.prototype.querySelector) {\r\n\t\tconsole.error(\"Missing required function: Element.querySelector.\");\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Utilities                                                      **/\r\n\t/********************************************************************/\r\n\r\n\tconst isType = function(obj, type) {\r\n\t\treturn Object.prototype.toString.call(obj) === '[object '+type+']';\r\n\t};\r\n\r\n\tconst isUndefined = function(obj) {\r\n\t\treturn (typeof obj) === 'undefined';\r\n\t};\r\n\r\n\tconst isNull = function(obj) {\r\n\t\treturn obj === null;\r\n\t};\r\n\r\n\tconst isBoolean = function(obj) {\r\n\t\treturn isType(obj, 'Boolean');\r\n\t};\r\n\r\n\tconst isNumber = function(obj) {\r\n\t\treturn isType(obj, 'Number');\r\n\t};\r\n\r\n\tconst isString = function(obj) {\r\n\t\treturn isType(obj, 'String');\r\n\t};\r\n\r\n\tconst isArray = function(obj) {\r\n\t\treturn isType(obj, 'Array');\r\n\t};\r\n\r\n\tconst isFunction = function(obj) {\r\n\t\treturn isType(obj, 'Function');\r\n\t};\r\n\r\n\tconst isObject = function(obj) {\r\n\t\treturn isType(obj, 'Object');\r\n\t};\r\n\r\n\tconst isBlank = function(obj) {\r\n\t\treturn (\r\n\t\t\t\tisUndefined(obj)\r\n\t\t\t|| isNull(obj) \r\n\t\t\t|| (isArray(obj) && obj.length === 0) \r\n\t\t\t|| (isNumber(obj) && isNaN(obj)) \r\n\t\t\t|| (isString(obj) && obj.trim().length === 0)\r\n\t\t\t|| obj === 0 \r\n\t\t);\r\n\t};\r\n\t\r\n\tconst each = function(list, func) {\r\n\t\tif (isUndefined(list) || isNull(list)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if (isBoolean(list) || isNumber(list) || isString(list)) {\r\n\t\t\tfunc(list, null, 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let x in list) if (list.hasOwnProperty(x)) {\r\n\t\t\t\tif (func(list[x], x, list.length))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst fold = function(obj, func) {\r\n\t\tfunc(obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\tconst queryString = function(map) {\r\n\t\tlet accum = [];\r\n\t\teach(map, (value, key) => {\r\n\t\t\tif (isArray(value)) {\r\n\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\taccum.push(\r\n\t\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value[i])\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!isUndefined(value) && !isNull(value)) {\r\n\t\t\t\taccum.push(\r\n\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn accum.join('&');\r\n\t};\r\n\t\r\n\tconst createElement = function(name, attribs, children) {\r\n\t\tconst out = document.createElement(name);\r\n\t\tif (attribs) each(attribs, (v, k) => {\r\n\t\t\tconst attrObj = document.createAttribute(k);\r\n\t\t\tattrObj.value = v;\r\n\t\t\tout.setAttributeNode(attrObj);\r\n\t\t});\r\n\r\n\t\tif (children) {\r\n\t\t\tif (isArray(children)) {\r\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\t\t\t\t\tout.appendChild(children[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tout.appendChild(children);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out;\r\n\t};\r\n\r\n\tconst createText = function(data) {\r\n\t\treturn document.createTextNode(data);\r\n\t};\r\n\r\n\tconst ENTITIES = {\r\n\t\t'&': '&amp;',\r\n\t\t'<': '&lt;',\r\n\t\t'>': '&gt;',\r\n\t\t'\"': '&quot;',\r\n\t\t\"'\": '&#39;',\r\n\t\t'/': '&#x2F;',\r\n\t\t'`': '&#x60;',\r\n\t\t'=': '&#x3D;'\r\n\t};\r\n\t\r\n\tconst HTML_SPECIAL = /&|\\<|\\>|\\\"|\\'|\\/|`|=/g;\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Other Getters                                                  **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Fetches an element by its id attribute and wraps it in a SelectionGroup.\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} id the id.\r\n\t * @returns {SelectionGroup} the corresponding element in a SelectionGroup, or empty group if no element.\r\n\t */\r\n\tconst $getById = function(id) {\r\n\t\treturn new SelectionGroup(document.getElementById(id));\r\n\t};\r\n\r\n\t/**\r\n\t * Fetches a group of elements by an associated class name.\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} classname the class name.\r\n\t * @returns {SelectionGroup} the corresponding elements in a SelectionGroup, or empty group if no elements.\r\n\t */\r\n\tconst $getByClassName = function(classname) {\r\n\t\treturn new SelectionGroup(document.getElementsByClassName(classname));\r\n\t};\r\n\r\n\t/**\r\n\t * Fetches a group of elements by an associated tag name (and optional namespace).\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} tagname the tag name.\r\n\t * @param {string} namespace (optional) the tag namespace.\r\n\t * @returns {SelectionGroup} the corresponding elements in a SelectionGroup, or empty group if no elements.\r\n\t */\r\n\tconst $getByTagName = function(tagname, namespace) {\r\n\t\treturn isUndefined(namespace) \r\n\t\t\t? new SelectionGroup(document.getElementsByTagName(tagname)) \r\n\t\t\t: new SelectionGroup(document.getElementsByTagNameNS(namespace, tagname))\r\n\t\t;\r\n\t};\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Classes                                                        **/\r\n\t/********************************************************************/\r\n\r\n\tclass SelectionGroup extends Array {\r\n\t\tconstructor(elements, forceOne) {\r\n\t\t\tsuper();\r\n\t\t\t// Make empty if no elements.\r\n\t\t\tif (isUndefined(elements) || isNull(elements)) {\r\n\t\t\t\tthis.length = 0;\r\n\t\t\t}\r\n\t\t\t// Wrap in one thing if not an array or list.\r\n\t\t\telse if (!!forceOne || isUndefined(elements.length)) {\r\n\t\t\t\tthis[0] = elements;\r\n\t\t\t\tthis.length = 1;\r\n\t\t\t}\r\n\t\t\t// Else, turn into selection.\r\n\t\t\telse {\r\n\t\t\t\tfor (let i = 0; i < elements.length; i++) {\r\n\t\t\t\t\tthis[i] = elements[i];\r\n\t\t\t\t}\r\n\t\t\t\tthis.length = elements.length;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Commands                                                       **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Calls a function on each element in the SelectionGroup.\r\n\t * Each element is passed to the function as [this] and the first \r\n\t * parameter (for fat-arrow lambdas that preserve [this]).\r\n\t * @param {function} func the function to call for each element.\r\n\t */\r\n\tconst $each = function(func) {\r\n\t\tfunc.apply(this, this);\r\n\t};\r\n\r\n\t/**\r\n\t * Performs a document query on the first DOM element in the SelectionGroup, \r\n\t * and returns a new SelectionGroup of the result.\r\n\t * @param {string} query the CSS/document query.\r\n\t * @param {boolean} one (optional) if true, return the first match.\r\n\t * @returns {SelectionGroup} the new SelectionGroup of matching elements.\r\n\t */\r\n\tconst $search = function(query, one) {\r\n\t\treturn !!one \r\n\t\t\t? new SelectionGroup(this.querySelector(query)) \r\n\t\t\t: new SelectionGroup(this.querySelectorAll(query))\r\n\t\t;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a child of the first DOM element in the SelectionGroup.\r\n\t * @param {number} index the index of the child element to fetch.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the single child.\r\n\t */\r\n\tconst $child = function(index) {\r\n\t\treturn new SelectionGroup(this.children[index]);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets all immediate children of the first DOM element in the SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the children.\r\n\t */\r\n\tconst $children = function() {\r\n\t\treturn new SelectionGroup(this.children);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets the immediate parent of the first DOM element in the SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the parent element.\r\n\t */\r\n\tconst $parent = function() {\r\n\t\treturn new SelectionGroup(this.parentElement);\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup.\r\n\t */\r\n\tconst $clear = function() {\r\n\t\twhile (this.firstChild) {\r\n\t\t\tthis.removeChild(this.firstChild);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Appends one or more child elements to all of the children in each DOM element in the SelectionGroup.\r\n\t * If elements is an array, each child in the array is appended.\r\n\t * If elements is a Document, that Document's children are appended.\r\n\t * Otherwise, elements is considered to be one element, and it is appended.\r\n\t * @param {*} elements one or more children to add.\r\n\t */\r\n\tconst $append = function(elements) {\r\n\t\tif (isArray(elements)) {\r\n\t\t\tfor (let i = 0; i < elements.length; i++) {\r\n\t\t\t\tthis.appendChild(elements[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (elements instanceof Document) {\r\n\t\t\tfor (let i = 0; i < elements.children.length; i++) {\r\n\t\t\t\tthis.appendChild(elements.children[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.appendChild(elements);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup, and\r\n\t * fills them with a new list of children.\r\n\t * Equivalent to: .clear().append(elements)\r\n\t * @param {*} elements one or more children to add.\r\n\t */\r\n\tconst $refill = function(elements) {\r\n\t\t(new SelectionGroup(this)).clear().append(elements);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup, and\r\n\t * then, using the provided array of data, fills them with children generated\r\n\t * from the provided array.\r\n\t * If a non-truthy value is returned for an array element, it is not added.\r\n\t * @param {Array} arr the array of objects. Can be an object - they are both iterated on.\r\n\t * @param {Function} generatorFunc the element generator function. \r\n\t * \t\tFirst parameter is the array element to use, second is the array/map key.\r\n\t */\r\n\tconst $refillList = function(arr, generatorFunc) {\r\n\t\tconst elements = [];\r\n\t\teach(arr, (v, k) => {\r\n\t\t\tconst gen = generatorFunc(v, k);\r\n\t\t\tif (gen) {\r\n\t\t\t\telements.push(gen);\r\n\t\t\t}\r\n\t\t});\r\n\t\t(new SelectionGroup(this)).clear().append(elements);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets/Sets the inner HTML.\r\n\t * If HTML is provided, the inner HTML is set.\r\n\t * If it is undefined, this will return the inner HTML of the first DOM element in the SelectionGroup.\r\n\t * @param {string} data HTML data to set.\r\n\t */\r\n\tconst $html = function(data) {\r\n\t\tif (isUndefined(data)) {\r\n\t\t\treturn this.innerHTML;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.innerHTML = data;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets/Sets the inner text.\r\n\t * If text is provided, the inner HTML is set to the text. Special characters will be converted to entities.\r\n\t * If it is undefined, this will return the inner text of the first DOM element in the SelectionGroup.\r\n\t * @param {string} data HTML data to set.\r\n\t */\r\n\tconst $text = function(text) {\r\n\t\tif (isUndefined(text)) {\r\n\t\t\treturn this.innerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.innerHTML = text.replace(HTML_SPECIAL, (m) => ENTITIES[m]);\r\n\t\t}\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Sets a member on each element of the SelectionGroup to a value.\r\n\t * @param {string} memberName the member name.\r\n\t * @param {*} value the value.\r\n\t */\r\n\tconst $set = function(memberName, value) {\r\n\t\tthis[memberName] = value;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Merges several members into each object's members in the SelectionGroup.\r\n\t * @param {object} memberMap the mapping of member names to values.\r\n\t */\r\n\tconst $merge = function(memberMap) {\r\n\t\teach(memberMap, (v, k) => {\r\n\t\t\tthis[k] = v;\r\n\t\t});\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Merges a set of CSS attributes into each element's local style in the SelectionGroup, or fetches them from the first.\r\n\t * If input is undefined, this will return a copied object of this element's local styles.\r\n\t * If input is an array of CSS attribute names, this will return an object of this element's corresponding local style values.\r\n\t * If input is a CSS attribute name, this will return this element's corresponding local style values.\r\n\t * If input is an object, this sets each element's local style values to the provided CSS attribute names and values.\r\n\t * @param {*} input the input value.\r\n\t */\r\n\tconst $style = function(input) {\r\n\t\tif (isUndefined(input)) {\r\n\t\t\treturn { ...this.style };\r\n\t\t}\r\n\t\telse if (isArray(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\teach(input, (s) => {\r\n\t\t\t\tout[s] = this.style[s];\r\n\t\t\t});\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isObject(input)) {\r\n\t\t\teach(input, (v, k) => {\r\n\t\t\t\tthis.style[k] = v;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.style[input];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Merges a set of DOM attributes into each element's attributes in the SelectionGroup, or fetches them from the first.\r\n\t * If input is undefined, this will return an object of this element's attribute values.\r\n\t * If input is an array of attribute names, this will return an object of this element's corresponding attribute values.\r\n\t * If input is an attribute name, this will return this element's corresponding attribute value.\r\n\t * If input is an object, this sets each element's attributes to the provided corresponding values.\r\n\t * @param {*} input the input value.\r\n\t */\r\n\tconst $attr = function(input) {\r\n\t\tif (isUndefined(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\tconst names = this.getAttributeNames();\r\n\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\tout[names[i]] = this.getAttribute(names[i]);\r\n\t\t\t}\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isArray(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\teach(input, (a) => {\r\n\t\t\t\tout[a] = this.getAttribute(a);\r\n\t\t\t});\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isObject(input)) {\r\n\t\t\teach(input, (v, k) => {\r\n\t\t\t\tthis.setAttribute(k, v);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getAttribute(input);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a set of CSS classes to each element in the SelectionGroup.\r\n\t * @param {string} classNames... the vararg list of class names to add to each element.\r\n\t */\r\n\tconst $classAdd = function(/* classNames... */) {\r\n\t\tconst classNames = arguments;\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst classSet = fold({}, (obj) => {\r\n\t\t\tclasses.map((c) => {obj[c] = true;});\r\n\t\t});\r\n\t\tfor (let i = 0; i < classNames.length; i++) {\r\n\t\t\tif (!classSet[classNames[i]]) {\r\n\t\t\t\tclasses.push(classNames[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.className = classes.join(\" \");\r\n\t};\r\n\r\n\t/**\r\n\t * Removes a set of CSS classes from each element in the SelectionGroup.\r\n\t * @param {string} classNames... the vararg list of class names to remove from each element.\r\n\t */\r\n\tconst $classRemove = function(/* classNames... */) {\r\n\t\tconst classNames = arguments;\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst remset = {};\r\n\t\tfor (let i = 0; i < classNames.length; i++) {\r\n\t\t\tremset[classNames[i]] = true;\r\n\t\t}\r\n\t\tconst out = [];\r\n\t\teach(classes, (c) => {\r\n\t\t\tif (!remset[c]) {\r\n\t\t\t\tout.push(c);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (isBlank(out))\r\n\t\t\tthis.removeAttribute('class');\r\n\t\telse\r\n\t\t\tthis.className = out.join(\" \");\r\n\t};\r\n\r\n\t/**\r\n\t * Toggles the presence of a set of CSS classes in each element in the SelectionGroup.\r\n\t * If the class exists, it is removed, and if the class does not exist, it is added.\r\n\t * @param {string} classNames... the vararg list of class names to toggle in each element.\r\n\t */\r\n\tconst $classToggle = function(/* classNames... */) {\r\n\t\tconst classNames = arguments;\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst classSet = fold({}, (obj) => {\r\n\t\t\tclasses.map((c) => {obj[c] = true;});\r\n\t\t});\r\n\t\tconst argSet = fold({}, (obj) => {\r\n\t\t\teach(classNames, (c) => {\r\n\t\t\t\tobj[c] = true;\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\tconst out = [];\r\n\r\n\t\tfor (let i = 0; i < classes.length; i++) {\r\n\t\t\tconst name = classes[i];\r\n\t\t\tif (!argSet[name]) {\r\n\t\t\t\tout.push(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < classNames.length; i++) {\r\n\t\t\tconst name = classNames[i];\r\n\t\t\tif (!classSet[name]) {\r\n\t\t\t\tout.push(name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isBlank(out))\r\n\t\t\tthis.removeAttribute('class');\r\n\t\telse\r\n\t\t\tthis.className = out.join(\" \");\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Scrapes a form element for its values and returns an object of the name-value pairings of the form fields,\r\n\t * or an object mapping (name/id for key).\r\n\t * The 'id' attribute is used if 'name' is not provided. Unnamed, disabled, or unchecked form elements are not scraped.\r\n\t * @param {function} callback (optional) if provided, call this function with one argument: the data returned.\r\n\t * @returns an object of the name/value pairings of the form fields, or the pass-through selection group if a callback was provided.\r\n\t */\r\n\tconst $form = function(callback) {\r\n\t\t\r\n\t\tif (!isUndefined(callback) && !isFunction(callback)) {\r\n\t\t\tthrow new Error(\"Callback function for formData must be a function!\");\r\n\t\t}\r\n\t\t\r\n\t\tconst formData = {};\r\n\r\n\t\tconst GATHERFUNC = function() {\r\n\t\t\tconst memberName = this.getAttribute('name');\r\n\t\t\tif (!!memberName) {\r\n\t\t\t\tif (!this.disabled) {\r\n\t\t\t\t\tconst t = this.getAttribute('type');\r\n\t\t\t\t\tconst v = (t === 'checkbox' || t === 'radio') \r\n\t\t\t\t\t\t? this.checked && this.value\r\n\t\t\t\t\t\t: this.value;\r\n\t\t\t\t\tif (v) {\r\n\t\t\t\t\t\tif (isObject(formData[memberName])) {\r\n\t\t\t\t\t\t\tformData[memberName].push(v);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (formData[memberName]) {\r\n\t\t\t\t\t\t\tlet arr = [formData[memberName], v];\r\n\t\t\t\t\t\t\tformData[memberName] = arr;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tformData[memberName] = v;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t(new SelectionGroup(this)).search('input, textarea, select').each(GATHERFUNC);\r\n\r\n\t\tif (callback) {\r\n\t\t\tcallback(formData);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn formData;\r\n\t\t}\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\tconst EVENTNAME = (name) => ('on' + name.toLowerCase());\r\n\r\n\t/**\r\n\t * Attaches a function to a DOM element event handler (the \"on\" members).\r\n\t * The function attached is wrapped in a different function that\r\n\t * parses out the event target and passes it to the function as [this].\r\n\t * @param {string} eventName the event name (for example, if \"mouseover\", attaches to \"onmouseover\").\r\n\t * @param {Function} func the function to wrap (the function's [this] becomes the element, and the function's first arg is the event. Cannot be a lambda closure).\r\n\t */\r\n\tconst $attach = function(eventName, func) {\r\n\t\tconst self = this;\r\n\t\tthis[EVENTNAME(eventName)] = func ? function(event) {\r\n\t\t\tfunc.apply(self, [event]);\r\n\t\t} : null;\r\n\t};\r\n\r\n\t/**\r\n\t * Detaches a function from a DOM element event handler (the \"on\" members).\r\n\t * @param {string} eventName the event name (for example, if \"mouseover\", nullifies \"onmouseover\").\r\n\t */\r\n\tconst $detach = function(eventName) {\r\n\t\tthis[EVENTNAME(eventName)] = null;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Wraps a single element in the SelectionGroup in a new SelectionGroup.\r\n\t * @param {number} index the index of the selected element.\r\n\t * @returns {SelectionGroup} the new SelectionGroup of matching elements.\r\n\t */\r\n\tconst $get = function(index) {\r\n\t\treturn new SelectionGroup(this[index]);\r\n\t};\r\n\r\n\t/**\r\n\t * Wraps the first element in the SelectionGroup in a new SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup.\r\n\t */\r\n\tconst $first = function() {\r\n\t\treturn new SelectionGroup(this[0]);\r\n\t};\r\n\r\n\t/**\r\n\t * Wraps the last element in the SelectionGroup in a new SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup.\r\n\t */\r\n\tconst $last = function() {\r\n\t\treturn new SelectionGroup(this[this.length - 1]);\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Takes a single object where the keys are selector queries to run via .search() and\r\n\t * corresponding values are functions to call on the selection results via .each().\r\n\t * @param {object} selectorMap the mapping of selector strings to functions.\r\n\t */\r\n\tconst $apply = function(selectorMap) {\r\n\t\teach(selectorMap, (v, k) => {\r\n\t\t\tthis.search(k).each(v);\r\n\t\t});\r\n\t};\r\n\r\n\r\n\t/********************************************************************/\r\n\t/** Exported                                                       **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Performs a document query, returning the list of matches as a SelectionGroup.\r\n\t * If the first argument is undefined or null, an empty SelectionGroup is returned.\r\n\t * If the first argument is a string, it is treated as a CSS selector, and the elements that match are in the SelectionGroup. \r\n\t * Anything else, and the SelectionGroup contains that object, or treats it like a group if it is an array.\r\n\t * @param {*} query the CSS/document query.\r\n\t * @param {boolean} one (optional) if true, and CSS selector, return only the first match.\r\n\t * @returns {SelectionGroup} the matching elements, encapsulated.\r\n\t */\r\n\tconst DOMJunk = new function() {\r\n\t\treturn function(query, one) {\r\n\t\t\tif (isUndefined(query) || isNull(query)) {\r\n\t\t\t\treturn new SelectionGroup([]);\r\n\t\t\t}\r\n\t\t\telse if (isString(query)) {\r\n\t\t\t\treturn !!one \r\n\t\t\t\t\t? new SelectionGroup(document.querySelector(query))\r\n\t\t\t\t\t: new SelectionGroup(document.querySelectorAll(query))\r\n\t\t\t\t;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn new SelectionGroup(query)\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a wrapped function to the SelectionGroup prototype.\r\n\t * The function's [this] keyword becomes each element.\r\n\t * When the function is called, it is called once per element, unless the function returns a value.\r\n\t * If the function returns a value (not undefined), it is returned as the result.\r\n\t * If it never returned a function, the SelectionGroup instance is returned as the result.\r\n\t * @param {string} name the name of the function to add to all query results.\r\n\t * @param {Function} func the function itself (cannot be a lambda closure).\r\n\t */\r\n\tDOMJunk.extend = function(name, func) {\r\n\t\tif (SelectionGroup.prototype[name]) {\r\n\t\t\tconsole.warn('DOMJunk: Overriding existing function: ' + name);\r\n\t\t}\r\n\t\tSelectionGroup.prototype[name] = function() {\r\n\t\t\tlet retval;\r\n\t\t\tfor (let i = 0; i < this.length && isUndefined(retval); i++) {\r\n\t\t\t\tretval = func.apply(this[i], arguments);\r\n\t\t\t}\r\n\t\t\treturn isUndefined(retval) ? this : retval;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a wrapped function to the SelectionGroup prototype.\r\n\t * The function's [this] keyword becomes the SelectionGroup itself.\r\n\t * @param {string} name the name of the function to add.\r\n\t * @param {Function} func the function to add (cannot be a lambda closure).\r\n\t */\r\n\tDOMJunk.extendSelection = function(name, func) {\r\n\t\tif (SelectionGroup.prototype[name]) {\r\n\t\t\tconsole.warn('DOMJunk: Overriding existing function: ' + name);\r\n\t\t}\r\n\t\tSelectionGroup.prototype[name] = function() {\r\n\t\t\treturn func.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\t\r\n\t/**\r\n\t * Auto-selects a series of selection groups using an object that maps\r\n\t * member name to selector query or function that returns a SelectionGroup.\r\n\t * @param {Object} memberSet a map of member name to selector.\r\n\t * \t\tIf the selector is a string, it is used as a selector to build the group.\r\n\t * \t\tElse if it's a function, it is called to return the member's value.\r\n\t * \t\tElse, it is the member's value.\r\n\t * @returns a new object that is a mapping of name to SelectionGroup.\r\n\t */\r\n\tDOMJunk.createGroups = function(memberSet) {\r\n\t\tconst out = {};\r\n\t\teach(memberSet, (selector, memberName) => {\r\n\t\t\tlet value = null;\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tvalue = DOMJunk(selector);\r\n\t\t\t} else if (isFunction(selector)) {\r\n\t\t\t\tvalue = selector();\r\n\t\t\t} else {\r\n\t\t\t\tvalue = selector;\r\n\t\t\t}\r\n\r\n\t\t\tout[memberName] = value;\r\n\t\t});\r\n\t\treturn out;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\tDOMJunk.extend('each', $each);\r\n\tDOMJunk.extend('search', $search);\r\n\tDOMJunk.extend('child', $child);\r\n\tDOMJunk.extend('children', $children);\r\n\tDOMJunk.extend('parent', $parent);\r\n\r\n\tDOMJunk.extend('clear', $clear);\r\n\tDOMJunk.extend('append', $append);\r\n\tDOMJunk.extend('refill', $refill);\r\n\tDOMJunk.extend('refillList', $refillList);\r\n\tDOMJunk.extend('html', $html);\r\n\tDOMJunk.extend('text', $text);\r\n\r\n\tDOMJunk.extend('set', $set);\r\n\tDOMJunk.extend('merge', $merge);\r\n\r\n\tDOMJunk.extend('style', $style);\r\n\tDOMJunk.extend('attr', $attr);\r\n\tDOMJunk.extend('classAdd', $classAdd);\r\n\tDOMJunk.extend('classRemove', $classRemove);\r\n\tDOMJunk.extend('classToggle', $classToggle);\r\n\r\n\tDOMJunk.extend('attach', $attach);\r\n\tDOMJunk.extend('detach', $detach);\r\n\r\n\tDOMJunk.extendSelection('get', $get);\r\n\tDOMJunk.extendSelection('first', $first);\r\n\tDOMJunk.extendSelection('last', $last);\r\n\tDOMJunk.extendSelection('form', $form);\r\n\tDOMJunk.extendSelection('apply', $apply);\r\n\r\n\tconst wrapAttach = function(attachName) {\r\n\t\treturn function(func) { this.attach(attachName, func); };\r\n\t}\r\n\r\n\tDOMJunk.extendSelection('load',     wrapAttach('load'));\r\n\tDOMJunk.extendSelection('unload',   wrapAttach('unload'));\r\n\tDOMJunk.extendSelection('click',    wrapAttach('click'));\r\n\tDOMJunk.extendSelection('dblclick', wrapAttach('dblclick'));\r\n\tDOMJunk.extendSelection('hover',    wrapAttach('mouseenter'));\r\n\tDOMJunk.extendSelection('leave',    wrapAttach('mouseleave'));\r\n\tDOMJunk.extendSelection('keydown',  wrapAttach('keydown'));\r\n\tDOMJunk.extendSelection('keyup',    wrapAttach('keyup'));\r\n\tDOMJunk.extendSelection('focus',    wrapAttach('focus'));\r\n\tDOMJunk.extendSelection('blur',     wrapAttach('blur'));\r\n\tDOMJunk.extendSelection('change',   wrapAttach('change'));\r\n\r\n\tDOMJunk.id =    $getById;\r\n\tDOMJunk.class = $getByClassName;\r\n\tDOMJunk.tag =   $getByTagName;\r\n\r\n\tDOMJunk.each = each;\r\n\tDOMJunk.fold = fold;\r\n\tDOMJunk.queryString = queryString;\r\n\r\n\tDOMJunk.isType = isType;\r\n\tDOMJunk.isUndefined = isUndefined;\r\n\tDOMJunk.isNull = isNull;\r\n\tDOMJunk.isBoolean = isBoolean;\r\n\tDOMJunk.isNumber = isNumber;\r\n\tDOMJunk.isString = isString;\r\n\tDOMJunk.isArray = isArray;\r\n\tDOMJunk.isFunction = isFunction;\r\n\tDOMJunk.isObject = isObject;\r\n\tDOMJunk.isBlank = isBlank;\r\n\tDOMJunk.e = createElement;\r\n\tDOMJunk.t = createText;\r\n\r\n\t/********************************************************************/\r\n\r\n\tlet old$DJAssignment     = CTX.$DJ;\r\n\tlet old$DJMainAssignment = CTX.$DJMain;\r\n\r\n\t/**\r\n\t * Restores the previous assigment of '$DJ' and '$DJMain' at load.\r\n\t */\r\n\tDOMJunk.noConflict = function() {\r\n\t\tCTX.$DJ     = old$DJAssignment;\r\n\t\tCTX.$DJMain = old$DJMainAssignment;\r\n\t};\r\n\t\r\n\tCTX.DOMJunk = DOMJunk;\r\n\tCTX.$DJ     = DOMJunk;\r\n\tCTX.$DJMain = function(func) { \r\n\t\tDOMJunk.tag('body').load(func); \r\n\t};\r\n\r\n\t/**\r\n\t TODO: Add stuff, maybe.\r\n\t\tTemplateCreate\r\n\t\tTemplateSet\r\n\t\tTemplateAppend\r\n\t\tTemplateFill\r\n\t\tFormValidate\r\n\t\tFormFill\r\n\t\tDOMSiblings\r\n\t\tDOMDescendants\r\n\t\tDOMAncestors\r\n\t*/\r\n\r\n})(this);\r\n"],"names":["CTX","Element","console","error","document","querySelectorAll","querySelector","createElement","createTextNode","prototype","isBoolean","obj","isType","isFunction","isObject","isBlank","isUndefined","isNull","isArray","length","isNumber","isNaN","isString","trim","each","list","func","let","x","hasOwnProperty","fold","type","Object","toString","call","ENTITIES","&","<",">","\"","'","/","`","=","HTML_SPECIAL","SelectionGroup","Array","constructor","elements","forceOne","super","this","i","EVENTNAME","name","toLowerCase","DOMJunk","query","one","extend","warn","retval","apply","arguments","extendSelection","createGroups","memberSet","out","selector","memberName","value","index","children","parentElement","firstChild","removeChild","appendChild","Document","clear","append","arr","generatorFunc","v","k","gen","push","data","innerHTML","text","innerText","replace","m","memberMap","input","style","s","names","getAttributeNames","getAttribute","a","setAttribute","classNames","classes","className","split","classSet","map","c","join","remset","removeAttribute","argSet","eventName","self","event","callback","Error","formData","search","disabled","t","checked","selectorMap","wrapAttach","attachName","attach","id","getElementById","class","classname","getElementsByClassName","tag","tagname","namespace","getElementsByTagName","getElementsByTagNameNS","queryString","accum","key","encodeURIComponent","e","attribs","attrObj","createAttribute","setAttributeNode","old$DJAssignment","$DJ","old$DJMainAssignment","$DJMain","noConflict","load"],"mappings":"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"}