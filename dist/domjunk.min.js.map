{"version":3,"sources":["STDIN"],"sourcesContent":["/****************************************************************************\r\n * DOMJunk by Matt Tropiano (C) 2021\r\n * Requires ECMAScript 6\r\n * Licensed for use under the MIT License\r\n * @license\r\n ****************************************************************************/\r\n(function(CTX){\r\n\t\r\n\t/********************************************************************/\r\n\t/** Test Browser Capabilities                                      **/\r\n\t/********************************************************************/\r\n\r\n\tif (!CTX.document.querySelectorAll) {\r\n\t\tconsole.error(\"Missing required function: document.querySelectorAll.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.querySelector) {\r\n\t\tconsole.error(\"Missing required function: document.querySelector.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.createElement) {\r\n\t\tconsole.error(\"Missing required function: document.createElement.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.document.createTextNode) {\r\n\t\tconsole.error(\"Missing required function: document.createTextNode.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.Element.prototype.querySelectorAll) {\r\n\t\tconsole.error(\"Missing required function: Element.querySelectorAll.\");\r\n\t\treturn;\r\n\t}\r\n\tif (!CTX.Element.prototype.querySelector) {\r\n\t\tconsole.error(\"Missing required function: Element.querySelector.\");\r\n\t\treturn;\r\n\t}\r\n\r\n\t/********************************************************************/\r\n\t/** Utilities                                                      **/\r\n\t/********************************************************************/\r\n\r\n\tconst isType = function(obj, type) {\r\n\t\treturn Object.prototype.toString.call(obj) === '[object '+type+']';\r\n\t};\r\n\r\n\tconst isUndefined = function(obj) {\r\n\t\treturn (typeof obj) === 'undefined';\r\n\t};\r\n\r\n\tconst isNull = function(obj) {\r\n\t\treturn obj === null;\r\n\t};\r\n\r\n\tconst isBoolean = function(obj) {\r\n\t\treturn isType(obj, 'Boolean');\r\n\t};\r\n\r\n\tconst isNumber = function(obj) {\r\n\t\treturn isType(obj, 'Number');\r\n\t};\r\n\r\n\tconst isString = function(obj) {\r\n\t\treturn isType(obj, 'String');\r\n\t};\r\n\r\n\tconst isArray = function(obj) {\r\n\t\treturn isType(obj, 'Array');\r\n\t};\r\n\r\n\tconst isFunction = function(obj) {\r\n\t\treturn isType(obj, 'Function');\r\n\t};\r\n\r\n\tconst isObject = function(obj) {\r\n\t\treturn isType(obj, 'Object');\r\n\t};\r\n\r\n\tconst isBlank = function(obj) {\r\n\t\treturn (\r\n\t\t\t\tisUndefined(obj)\r\n\t\t\t|| isNull(obj) \r\n\t\t\t|| (isArray(obj) && obj.length === 0) \r\n\t\t\t|| (isNumber(obj) && isNaN(obj)) \r\n\t\t\t|| (isString(obj) && obj.trim().length === 0)\r\n\t\t\t|| obj === 0 \r\n\t\t);\r\n\t};\r\n\t\r\n\tconst each = function(list, func) {\r\n\t\tif (isUndefined(list) || isNull(list)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if (isBoolean(list) || isNumber(list) || isString(list)) {\r\n\t\t\tfunc(list, null, 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let x in list) if (list.hasOwnProperty(x)) {\r\n\t\t\t\tif (func(list[x], x, list.length))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst fold = function(obj, func) {\r\n\t\tfunc(obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\tconst queryString = function(map) {\r\n\t\tlet accum = [];\r\n\t\teach(map, (value, key) => {\r\n\t\t\tif (isArray(value)) {\r\n\t\t\t\tfor (let i = 0; i < value.length; i++) {\r\n\t\t\t\t\taccum.push(\r\n\t\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value[i])\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!isUndefined(value) && !isNull(value)) {\r\n\t\t\t\taccum.push(\r\n\t\t\t\t\tencodeURIComponent(key) + '=' + encodeURIComponent(value)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn accum.join('&');\r\n\t};\r\n\t\r\n\tconst createElement = function(name, attribs, children) {\r\n\t\tconst out = document.createElement(name);\r\n\t\tif (attribs) each(attribs, (v, k) => {\r\n\t\t\tconst attrObj = document.createAttribute(k);\r\n\t\t\tattrObj.value = v;\r\n\t\t\tout.setAttributeNode(attrObj);\r\n\t\t});\r\n\r\n\t\tif (children) {\r\n\t\t\tif (isArray(children)) {\r\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\t\t\t\t\tout.appendChild(children[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tout.appendChild(children);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out;\r\n\t};\r\n\r\n\t// Matches() polyfill.\r\n\tconst elemMatches = (\r\n\t\tElement.prototype.matches ||\r\n\t\tElement.prototype.matchesSelector || \r\n\t\tElement.prototype.msMatchesSelector\r\n\t);\r\n\t\r\n\tconst matches = function(elem, selector){\r\n\t\treturn elemMatches.call(elem, selector);\r\n\t};\r\n\r\n\tconst createText = function(data) {\r\n\t\treturn document.createTextNode(data);\r\n\t};\r\n\r\n\tconst ENTITIES = {\r\n\t\t'&': '&amp;',\r\n\t\t'<': '&lt;',\r\n\t\t'>': '&gt;',\r\n\t\t'\"': '&quot;',\r\n\t\t\"'\": '&#39;',\r\n\t\t'/': '&#x2F;',\r\n\t\t'`': '&#x60;',\r\n\t\t'=': '&#x3D;'\r\n\t};\r\n\t\r\n\tconst HTML_SPECIAL = /&|\\<|\\>|\\\"|\\'|\\/|`|=/g;\r\n\r\n\t/********************************************************************/\r\n\t/** Other Getters                                                  **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Fetches an element by its id attribute and wraps it in a SelectionGroup.\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} id the id.\r\n\t * @returns {SelectionGroup} the corresponding element in a SelectionGroup, or empty group if no element.\r\n\t */\r\n\tconst $getById = function(id) {\r\n\t\treturn new SelectionGroup(document.getElementById(id), true);\r\n\t};\r\n\r\n\t/**\r\n\t * Fetches a group of elements by an associated class name.\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} classname the class name.\r\n\t * @returns {SelectionGroup} the corresponding elements in a SelectionGroup, or empty group if no elements.\r\n\t */\r\n\tconst $getByClassName = function(classname) {\r\n\t\treturn new SelectionGroup(document.getElementsByClassName(classname));\r\n\t};\r\n\r\n\t/**\r\n\t * Fetches a group of elements by an associated tag name (and optional namespace).\r\n\t * In most cases, this is more performant than a CSS query.\r\n\t * @param {string} tagname the tag name.\r\n\t * @param {string} namespace (optional) the tag namespace.\r\n\t * @returns {SelectionGroup} the corresponding elements in a SelectionGroup, or empty group if no elements.\r\n\t */\r\n\tconst $getByTagName = function(tagname, namespace) {\r\n\t\treturn isUndefined(namespace) \r\n\t\t\t? new SelectionGroup(document.getElementsByTagName(tagname)) \r\n\t\t\t: new SelectionGroup(document.getElementsByTagNameNS(namespace, tagname))\r\n\t\t;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\t/** Classes                                                        **/\r\n\t/********************************************************************/\r\n\r\n\tclass SelectionGroup {\r\n\t\tconstructor(elements, forceOne) {\r\n\t\t\t// Make empty if no elements.\r\n\t\t\tif (isUndefined(elements) || isNull(elements)) {\r\n\t\t\t\tthis.length = 0;\r\n\t\t\t}\r\n\t\t\t// Wrap in one thing if not an array or list.\r\n\t\t\telse if (!!forceOne || isUndefined(elements.length)) {\r\n\t\t\t\tthis[0] = elements;\r\n\t\t\t\tthis.length = 1;\r\n\t\t\t}\r\n\t\t\t// Else, turn into selection.\r\n\t\t\telse {\r\n\t\t\t\tfor (let i = 0; i < elements.length; i++) {\r\n\t\t\t\t\tthis[i] = elements[i];\r\n\t\t\t\t}\r\n\t\t\t\tthis.length = elements.length;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/********************************************************************/\r\n\t/** Commands                                                       **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Calls a function on each element in the SelectionGroup.\r\n\t * Each element is passed to the function as [this] and the first \r\n\t * parameter (for fat-arrow lambdas that preserve [this]).\r\n\t * @param {function} func the function to call for each element.\r\n\t */\r\n\tconst $each = function(func) {\r\n\t\tfunc.apply(this, [this]);\r\n\t};\r\n\r\n\t/**\r\n\t * Performs a document query on the first DOM element in the SelectionGroup, \r\n\t * and returns a new SelectionGroup of the result.\r\n\t * @param {string} query the CSS/document query.\r\n\t * @param {boolean} one (optional) if true, return the first match.\r\n\t * @returns {SelectionGroup} the new SelectionGroup of matching elements.\r\n\t */\r\n\tconst $find = function(query, one) {\r\n\t\treturn !!one \r\n\t\t\t? new SelectionGroup(this.querySelector(query)) \r\n\t\t\t: new SelectionGroup(this.querySelectorAll(query))\r\n\t\t;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a child of the first DOM element in the SelectionGroup.\r\n\t * @param {number} index the index of the child element to fetch.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the single child.\r\n\t */\r\n\tconst $child = function(index) {\r\n\t\treturn new SelectionGroup(this.children[index], true);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets all immediate children of the first DOM element in the SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the children.\r\n\t */\r\n\tconst $children = function() {\r\n\t\treturn new SelectionGroup(this.children);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets the immediate parent of the first DOM element in the SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup with the parent element.\r\n\t */\r\n\tconst $parent = function() {\r\n\t\treturn new SelectionGroup(this.parentElement, true);\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup.\r\n\t */\r\n\tconst $clear = function() {\r\n\t\twhile (this.firstChild) {\r\n\t\t\tthis.removeChild(this.firstChild);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Appends one or more child elements to all of the children in each DOM element in the SelectionGroup.\r\n\t * If elements is an array, each child in the array is appended.\r\n\t * If elements is a Document, that Document's children are appended.\r\n\t * Otherwise, elements is considered to be one element, and it is appended.\r\n\t * @param {*} elements one or more children to add.\r\n\t */\r\n\tconst $append = function(elements) {\r\n\t\tif (isArray(elements)) {\r\n\t\t\tfor (let i = 0; i < elements.length; i++) {\r\n\t\t\t\tthis.appendChild(elements[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (elements instanceof Document) {\r\n\t\t\tfor (let i = 0; i < elements.children.length; i++) {\r\n\t\t\t\tthis.appendChild(elements.children[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.appendChild(elements);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup, and\r\n\t * fills them with a new list of children.\r\n\t * Equivalent to: .clear().append(elements)\r\n\t * @param {*} elements one or more children to add.\r\n\t */\r\n\tconst $refill = function(elements) {\r\n\t\t(new SelectionGroup(this)).clear().append(elements);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes all of the children in each DOM element in the SelectionGroup, and\r\n\t * then, using the provided array of data, fills them with children generated\r\n\t * from the provided array.\r\n\t * If a non-truthy value is returned for an array element, it is not added.\r\n\t * @param {Array} arr the array of objects. Can be an object - they are both iterated on.\r\n\t * @param {Function} generatorFunc the element generator function. \r\n\t * \t\tFirst parameter is the array element to use, second is the array/map key.\r\n\t */\r\n\tconst $refillList = function(arr, generatorFunc) {\r\n\t\tconst elements = [];\r\n\t\teach(arr, (v, k) => {\r\n\t\t\tconst gen = generatorFunc(v, k);\r\n\t\t\tif (gen) {\r\n\t\t\t\telements.push(gen);\r\n\t\t\t}\r\n\t\t});\r\n\t\t(new SelectionGroup(this)).clear().append(elements);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets/Sets the inner HTML.\r\n\t * If HTML is provided, the inner HTML is set.\r\n\t * If it is undefined, this will return the inner HTML of the first DOM element in the SelectionGroup.\r\n\t * @param {string} data HTML data to set.\r\n\t */\r\n\tconst $html = function(data) {\r\n\t\tif (isUndefined(data)) {\r\n\t\t\treturn this.innerHTML;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.innerHTML = data;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets/Sets the inner text.\r\n\t * If text is provided, the inner HTML is set to the text. Special characters will be converted to entities.\r\n\t * If it is undefined, this will return the inner text of the first DOM element in the SelectionGroup.\r\n\t * @param {string} data HTML data to set.\r\n\t */\r\n\tconst $text = function(text) {\r\n\t\tif (isUndefined(text)) {\r\n\t\t\treturn this.innerText;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.innerHTML = text.replace(HTML_SPECIAL, (m) => ENTITIES[m]);\r\n\t\t}\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Sets a member on each element of the SelectionGroup to a value.\r\n\t * @param {string} memberName the member name.\r\n\t * @param {*} value the value.\r\n\t */\r\n\tconst $set = function(memberName, value) {\r\n\t\tthis[memberName] = value;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Merges several members into each object's members in the SelectionGroup.\r\n\t * @param {object} memberMap the mapping of member names to values.\r\n\t */\r\n\tconst $merge = function(memberMap) {\r\n\t\teach(memberMap, (v, k) => {\r\n\t\t\tthis[k] = v;\r\n\t\t});\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Merges a set of CSS attributes into each element's local style in the SelectionGroup, or fetches them from the first.\r\n\t * If input is undefined, this will return a copied object of this element's local styles.\r\n\t * If input is an array of CSS attribute names, this will return an object of this element's corresponding local style values.\r\n\t * If input is a CSS attribute name, this will return this element's corresponding local style values.\r\n\t * If input is an object, this sets each element's local style values to the provided CSS attribute names and values.\r\n\t * @param {*} input the input value.\r\n\t */\r\n\tconst $style = function(input) {\r\n\t\tif (isUndefined(input)) {\r\n\t\t\treturn { ...this.style };\r\n\t\t}\r\n\t\telse if (isArray(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\teach(input, (s) => {\r\n\t\t\t\tout[s] = this.style[s];\r\n\t\t\t});\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isObject(input)) {\r\n\t\t\teach(input, (v, k) => {\r\n\t\t\t\tthis.style[k] = v;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.style[input];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Merges a set of DOM attributes into each element's attributes in the SelectionGroup, or fetches them from the first.\r\n\t * If input is undefined, this will return an object of this element's attribute values.\r\n\t * If input is an array of attribute names, this will return an object of this element's corresponding attribute values.\r\n\t * If input is an attribute name, this will return this element's corresponding attribute value.\r\n\t * If input is an object, this sets each element's attributes to the provided corresponding values.\r\n\t * @param {*} input the input value.\r\n\t */\r\n\tconst $attr = function(input) {\r\n\t\tif (isUndefined(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\tconst names = this.getAttributeNames();\r\n\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\tout[names[i]] = this.getAttribute(names[i]);\r\n\t\t\t}\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isArray(input)) {\r\n\t\t\tlet out = {};\r\n\t\t\teach(input, (a) => {\r\n\t\t\t\tout[a] = this.getAttribute(a);\r\n\t\t\t});\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse if (isObject(input)) {\r\n\t\t\teach(input, (v, k) => {\r\n\t\t\t\tthis.setAttribute(k, v);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getAttribute(input);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a set of CSS classes to each element in the SelectionGroup.\r\n\t * @param {string} varargs... the vararg list of class names to add to each element.\r\n\t */\r\n\tconst $classAdd = function() {\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst classSet = fold({}, (obj) => {\r\n\t\t\tclasses.map((c) => {obj[c] = true;});\r\n\t\t});\r\n\t\tfor (let i = 0; i < arguments.length; i++) {\r\n\t\t\tif (!classSet[arguments[i]]) {\r\n\t\t\t\tclasses.push(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.className = classes.join(\" \");\r\n\t};\r\n\r\n\t/**\r\n\t * Removes a set of CSS classes from each element in the SelectionGroup.\r\n\t * @param {string} varargs... the vararg list of class names to remove from each element.\r\n\t */\r\n\tconst $classRemove = function() {\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst remset = {};\r\n\t\tfor (let i = 0; i < arguments.length; i++) {\r\n\t\t\tremset[arguments[i]] = true;\r\n\t\t}\r\n\t\tconst out = [];\r\n\t\teach(classes, (c) => {\r\n\t\t\tif (!remset[c]) {\r\n\t\t\t\tout.push(c);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (isBlank(out))\r\n\t\t\tthis.removeAttribute('class');\r\n\t\telse\r\n\t\t\tthis.className = out.join(\" \");\r\n\t};\r\n\r\n\t/**\r\n\t * Toggles the presence of a set of CSS classes in each element in the SelectionGroup.\r\n\t * If the class exists, it is removed, and if the class does not exist, it is added.\r\n\t * @param {string} varargs... the vararg list of class names to toggle in each element.\r\n\t */\r\n\tconst $classToggle = function() {\r\n\t\tconst classes = this.className.trim().length > 0 ? this.className.split(/\\s+/) : [];\r\n\t\tconst classSet = fold({}, (obj) => {\r\n\t\t\tclasses.map((c) => {obj[c] = true;});\r\n\t\t});\r\n\t\tconst argSet = fold({}, (obj) => {\r\n\t\t\teach(arguments, (c) => {\r\n\t\t\t\tobj[c] = true;\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\tconst out = [];\r\n\r\n\t\tfor (let i = 0; i < classes.length; i++) {\r\n\t\t\tlet name = classes[i];\r\n\t\t\tif (!argSet[name]) {\r\n\t\t\t\tout.push(name);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < arguments.length; i++) {\r\n\t\t\tlet name = arguments[i];\r\n\t\t\tif (!classSet[name]) {\r\n\t\t\t\tout.push(name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isBlank(out))\r\n\t\t\tthis.removeAttribute('class');\r\n\t\telse\r\n\t\t\tthis.className = out.join(\" \");\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Scrapes a form element for its values and returns an object of the name-value pairings of the form fields,\r\n\t * or an object mapping (name/id for key).\r\n\t * The 'id' attribute is used if 'name' is not provided. Unnamed, disabled, or unchecked form elements are not scraped.\r\n\t * @param {function} callback (optional) if provided, call this function with one argument: the data returned.\r\n\t * @returns an object of the name/value pairings of the form fields, or the selection group if a callback was provided.\r\n\t */\r\n\tconst $form = function(callback) {\r\n\t\t\r\n\t\tif (!isUndefined(callback) && !isFunction(callback))\r\n\t\t\tthrow new Error(\"Callback function for formData must be a function!\");\r\n\t\t\r\n\t\tlet formData = {};\r\n\r\n\t\tconst GATHERFUNC = function() {\r\n\t\t\tconst memberName = this.getAttribute('name');\r\n\t\t\tif (!!memberName) {\r\n\t\t\t\tif (!matches(this, ':disabled')) {\r\n\t\t\t\t\tconst t = this.getAttribute('type');\r\n\t\t\t\t\tconst v = (t === 'checkbox' || t === 'radio') \r\n\t\t\t\t\t\t? matches(this, ':checked') && this.value\r\n\t\t\t\t\t\t: this.value;\r\n\t\t\t\t\tif (v) {\r\n\t\t\t\t\t\tif (isObject(formData[memberName])) {\r\n\t\t\t\t\t\t\tformData[memberName].push(v);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (formData[memberName]) {\r\n\t\t\t\t\t\t\tlet arr = [formData[memberName], v];\r\n\t\t\t\t\t\t\tformData[memberName] = arr;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tformData[memberName] = v;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t(new SelectionGroup(this)).find('input, textarea, select').each(GATHERFUNC);\r\n\r\n\t\tif (callback) {\r\n\t\t\tcallback(formData);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn formData;\r\n\t\t}\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\tconst EVENTNAME = (name) => ('on' + name.toLowerCase());\r\n\r\n\t/**\r\n\t * Attaches a function to a DOM element event handler (the \"on\" members).\r\n\t * The function attached is wrapped in a different function that\r\n\t * parses out the event target and passes it to the function as [this].\r\n\t * @param {string} eventName the event name (for example, if \"mouseover\", attaches to \"onmouseover\").\r\n\t * @param {Function} func the function to wrap (the function's [this] becomes the element, and the function's first arg is the event. Cannot be a lambda closure).\r\n\t */\r\n\tconst $attach = function(eventName, func) {\r\n\t\tconst self = this;\r\n\t\tthis[EVENTNAME(eventName)] = func ? function(event) {\r\n\t\t\tfunc.apply(self, [event]);\r\n\t\t} : null;\r\n\t};\r\n\r\n\t/**\r\n\t * Detaches a function from a DOM element event handler (the \"on\" members).\r\n\t * @param {string} eventName the event name (for example, if \"mouseover\", nullifies \"onmouseover\").\r\n\t */\r\n\tconst $detach = function(eventName) {\r\n\t\tthis[EVENTNAME(eventName)] = null;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Wraps a single element in the SelectionGroup in a new SelectionGroup.\r\n\t * @param {number} index the index of the selected element.\r\n\t * @returns {SelectionGroup} the new SelectionGroup of matching elements.\r\n\t */\r\n\tconst $get = function(index) {\r\n\t\treturn new SelectionGroup(this[index]);\r\n\t};\r\n\r\n\t/**\r\n\t * Wraps the first element in the SelectionGroup in a new SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup.\r\n\t */\r\n\tconst $first = function() {\r\n\t\treturn new SelectionGroup(this[0]);\r\n\t};\r\n\r\n\t/**\r\n\t * Wraps the last element in the SelectionGroup in a new SelectionGroup.\r\n\t * @returns {SelectionGroup} the new SelectionGroup.\r\n\t */\r\n\tconst $last = function() {\r\n\t\treturn new SelectionGroup(this[this.length - 1]);\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Takes a single object where the keys are selector queries to run via .find() and\r\n\t * corresponding values are functions to call on the selection results via .each().\r\n\t * @param {object} selectorMap the mapping of selector strings to functions.\r\n\t */\r\n\tconst $apply = function(selectorMap) {\r\n\t\teach(selectorMap, (v, k) => {\r\n\t\t\tthis.find(k).each(v);\r\n\t\t});\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\t/** Exported                                                       **/\r\n\t/********************************************************************/\r\n\r\n\t/**\r\n\t * Performs a document query, returning the list of matches as a SelectionGroup.\r\n\t * If the first argument is undefined or null, an empty SelectionGroup is returned.\r\n\t * If the first argument is a string, it is treated as a CSS selector, and the elements that match are in the SelectionGroup. \r\n\t * Anything else, and the SelectionGroup contains that object, or treats it like a group if it is an array.\r\n\t * @param {*} query the CSS/document query.\r\n\t * @param {boolean} one (optional) if true, and CSS selector, return only the first match.\r\n\t * @returns {SelectionGroup} the matching elements, encapsulated.\r\n\t */\r\n\tconst DOMJunk = new function() {\r\n\t\treturn function(query, one) {\r\n\t\t\tif (isUndefined(query) || isNull(query)) {\r\n\t\t\t\treturn new SelectionGroup([]);\r\n\t\t\t}\r\n\t\t\telse if (isString(query)) {\r\n\t\t\t\treturn !!one \r\n\t\t\t\t\t? new SelectionGroup(document.querySelector(query))\r\n\t\t\t\t\t: new SelectionGroup(document.querySelectorAll(query))\r\n\t\t\t\t;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn new SelectionGroup(query)\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a wrapped function to the SelectionGroup prototype.\r\n\t * The function's [this] keyword becomes each element.\r\n\t * When the function is called, it is called once per element, unless the function returns a value.\r\n\t * If the function returns a value (not undefined), it is returned as the result.\r\n\t * If it never returned a function, the SelectionGroup instance is returned as the result.\r\n\t * @param {string} name the name of the function to add to all query results.\r\n\t * @param {Function} func the function itself (cannot be a lambda closure).\r\n\t */\r\n\tDOMJunk.extend = function(name, func) {\r\n\t\tSelectionGroup.prototype[name] = function() {\r\n\t\t\tlet retval;\r\n\t\t\tfor (let i = 0; i < this.length && isUndefined(retval); i++) {\r\n\t\t\t\tretval = func.apply(this[i], arguments);\r\n\t\t\t}\r\n\t\t\treturn isUndefined(retval) ? this : retval;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a wrapped function to the SelectionGroup prototype.\r\n\t * The function's [this] keyword becomes the SelectionGroup itself.\r\n\t * @param {string} name the name of the function to add.\r\n\t * @param {Function} func the function to add (cannot be a lambda closure).\r\n\t */\r\n\tDOMJunk.extendSelection = function(name, func) {\r\n\t\tSelectionGroup.prototype[name] = function() {\r\n\t\t\treturn func.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\t\r\n\t/**\r\n\t * Adds/sets an AJAX response type handler.\r\n\t * The handled type is either the name of an expected type passed to options,\r\n\t * or the MIME-Type of the response body.\r\n\t * @param {string} handledTypeName the name of type.\r\n\t * @param {Function} func the handler function.\r\n\t */\r\n\tDOMJunk.extendAJAX = function(handledTypeName, func) {\r\n\t\tAJAXCall.prototype.responseTypeHandlers[handledTypeName] = func;\r\n\t};\r\n\r\n\t/**\r\n\t * Auto-selects a series of selection groups using an object that maps\r\n\t * member name to selector query or function that returns a SelectionGroup.\r\n\t * @param {Object} memberSet a map of member name to selector.\r\n\t * \t\tIf the selector is a string, it is used as a selector to build the group.\r\n\t * \t\tElse if it's a function, it is called to return the member's value.\r\n\t * \t\tElse, it is the member's value.\r\n\t * @returns a new object that is a mapping of name to SelectionGroup.\r\n\t */\r\n\tDOMJunk.createGroups = function(memberSet) {\r\n\t\tconst out = {};\r\n\t\teach(memberSet, (selector, memberName) => {\r\n\t\t\tlet value = null;\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tvalue = DOMJunk(selector);\r\n\t\t\t} else if (isFunction(selector)) {\r\n\t\t\t\tvalue = selector();\r\n\t\t\t} else {\r\n\t\t\t\tvalue = selector;\r\n\t\t\t}\r\n\r\n\t\t\tout[memberName] = value;\r\n\t\t});\r\n\t\treturn out;\r\n\t};\r\n\r\n\t/********************************************************************/\r\n\r\n\tDOMJunk.extend('each', $each);\r\n\tDOMJunk.extend('find', $find);\r\n\tDOMJunk.extend('child', $child);\r\n\tDOMJunk.extend('children', $children);\r\n\tDOMJunk.extend('parent', $parent);\r\n\r\n\tDOMJunk.extend('clear', $clear);\r\n\tDOMJunk.extend('append', $append);\r\n\tDOMJunk.extend('refill', $refill);\r\n\tDOMJunk.extend('refillList', $refillList);\r\n\tDOMJunk.extend('html', $html);\r\n\tDOMJunk.extend('text', $text);\r\n\r\n\tDOMJunk.extend('set', $set);\r\n\tDOMJunk.extend('merge', $merge);\r\n\r\n\tDOMJunk.extend('style', $style);\r\n\tDOMJunk.extend('attr', $attr);\r\n\tDOMJunk.extend('classAdd', $classAdd);\r\n\tDOMJunk.extend('classRemove', $classRemove);\r\n\tDOMJunk.extend('classToggle', $classToggle);\r\n\r\n\tDOMJunk.extend('attach', $attach);\r\n\tDOMJunk.extend('detach', $detach);\r\n\r\n\tDOMJunk.extendSelection('get', $get);\r\n\tDOMJunk.extendSelection('first', $first);\r\n\tDOMJunk.extendSelection('last', $last);\r\n\tDOMJunk.extendSelection('form', $form);\r\n\tDOMJunk.extendSelection('apply', $apply);\r\n\r\n\tconst wrapAttach = function(attachName) {\r\n\t\treturn function(func) { this.attach(attachName, func); };\r\n\t}\r\n\r\n\tDOMJunk.extendSelection('load',     wrapAttach('load'));\r\n\tDOMJunk.extendSelection('unload',   wrapAttach('unload'));\r\n\tDOMJunk.extendSelection('click',    wrapAttach('click'));\r\n\tDOMJunk.extendSelection('dblclick', wrapAttach('dblclick'));\r\n\tDOMJunk.extendSelection('hover',    wrapAttach('mouseenter'));\r\n\tDOMJunk.extendSelection('leave',    wrapAttach('mouseleave'));\r\n\tDOMJunk.extendSelection('keydown',  wrapAttach('keydown'));\r\n\tDOMJunk.extendSelection('keyup',    wrapAttach('keyup'));\r\n\tDOMJunk.extendSelection('focus',    wrapAttach('focus'));\r\n\tDOMJunk.extendSelection('blur',     wrapAttach('blur'));\r\n\tDOMJunk.extendSelection('change',   wrapAttach('change'));\r\n\r\n\tDOMJunk.id =    $getById;\r\n\tDOMJunk.class = $getByClassName;\r\n\tDOMJunk.tag =   $getByTagName;\r\n\r\n\tDOMJunk.each = each;\r\n\tDOMJunk.fold = fold;\r\n\tDOMJunk.queryString = queryString;\r\n\r\n\tDOMJunk.isType = isType;\r\n\tDOMJunk.isUndefined = isUndefined;\r\n\tDOMJunk.isNull = isNull;\r\n\tDOMJunk.isBoolean = isBoolean;\r\n\tDOMJunk.isNumber = isNumber;\r\n\tDOMJunk.isString = isString;\r\n\tDOMJunk.isArray = isArray;\r\n\tDOMJunk.isFunction = isFunction;\r\n\tDOMJunk.isObject = isObject;\r\n\tDOMJunk.isBlank = isBlank;\r\n\tDOMJunk.e = createElement;\r\n\tDOMJunk.t = createText;\r\n\r\n\t/********************************************************************/\r\n\r\n\tlet old$DJAssignment     = CTX.$DJ;\r\n\tlet old$DJMainAssignment = CTX.$DJMain;\r\n\r\n\t/**\r\n\t * Restores the previous assigment of '$DJ' and '$DJMain' at load.\r\n\t */\r\n\tDOMJunk.noConflict = function() {\r\n\t\tCTX.$DJ     = old$DJAssignment;\r\n\t\tCTX.$DJMain = old$DJMainAssignment;\r\n\t};\r\n\t\r\n\tCTX.DOMJunk = DOMJunk;\r\n\tCTX.$DJ     = DOMJunk;\r\n\tCTX.$DJMain = function(func) { DOMJunk.tag('body').load(func); };\r\n\r\n\t/**\r\n\t TODO: Add stuff, maybe.\r\n\t\tTemplateCreate\r\n\t\tTemplateSet\r\n\t\tTemplateAppend\r\n\t\tTemplateFill\r\n\t\tFormValidate\r\n\t\tFormFill\r\n\t\tDOMSiblings\r\n\t\tDOMDescendants\r\n\t\tDOMAncestors\r\n\t*/\r\n\r\n})(this);\r\n"],"names":["CTX","document","querySelectorAll","console","error","querySelector","createElement","createTextNode","Element","prototype","isBoolean","obj","isType","isFunction","isObject","isBlank","isUndefined","isNull","isArray","length","isNumber","isNaN","isString","trim","each","list","func","let","x","hasOwnProperty","fold","type","Object","toString","call","matches","elem","selector","elemMatches","matchesSelector","msMatchesSelector","ENTITIES","&","<",">","\"","'","/","`","=","HTML_SPECIAL","SelectionGroup","constructor","elements","forceOne","this","i","EVENTNAME","name","toLowerCase","DOMJunk","query","one","extend","retval","apply","arguments","extendSelection","extendAJAX","handledTypeName","AJAXCall","responseTypeHandlers","createGroups","memberSet","out","memberName","value","index","children","parentElement","firstChild","removeChild","appendChild","Document","clear","append","arr","generatorFunc","v","k","gen","push","data","innerHTML","text","innerText","replace","m","memberMap","input","style","s","names","getAttributeNames","getAttribute","a","setAttribute","classes","className","split","classSet","map","c","join","remset","removeAttribute","argSet","eventName","self","event","callback","Error","formData","find","t","selectorMap","wrapAttach","attachName","attach","id","getElementById","class","classname","getElementsByClassName","tag","tagname","namespace","getElementsByTagName","getElementsByTagNameNS","queryString","accum","key","encodeURIComponent","e","attribs","attrObj","createAttribute","setAttributeNode","old$DJAssignment","$DJ","old$DJMainAssignment","$DJMain","noConflict","load"],"mappings":"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"}